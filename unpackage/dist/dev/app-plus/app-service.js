(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["app-service"],[
/* 0 */
/*!******************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/main.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("__webpack_require__(/*! uni-pages */ 1);var _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 9));\nvar _socketIo = _interopRequireDefault(__webpack_require__(/*! static/socket.io.js */ 12));\n\n\n\n\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}_vue.default.prototype.socket = (0, _socketIo.default)('http://121.36.200.220:9000');\n_vue.default.config.productionTip = false;\n_App.default.mpType = 'app';\nvar app = new _vue.default(_objectSpread({},\n_App.default));\n\napp.$mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWFpbi5qcyJdLCJuYW1lcyI6WyJWdWUiLCJwcm90b3R5cGUiLCJzb2NrZXQiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiQXBwIiwibXBUeXBlIiwiYXBwIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBbUI7QUFDbkI7Ozs7OztBQU1BLHNFLHduQ0FMQUEsYUFBSUMsU0FBSixDQUFjQyxNQUFkLEdBQXFCLHVCQUFHLDRCQUFILENBQXJCO0FBTUFGLGFBQUlHLE1BQUosQ0FBV0MsYUFBWCxHQUEyQixLQUEzQjtBQUNBQyxhQUFJQyxNQUFKLEdBQWEsS0FBYjtBQUNBLElBQU1DLEdBQUcsR0FBRyxJQUFJUCxZQUFKO0FBQ0xLLFlBREssRUFBWjs7QUFHQUUsR0FBRyxDQUFDQyxNQUFKIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7aW1wb3J0IEFwcCBmcm9tICcuL0FwcCdcbmltcG9ydCBpbyBmcm9tICdzdGF0aWMvc29ja2V0LmlvLmpzJyAgICAgXG5WdWUucHJvdG90eXBlLnNvY2tldD1pbygnaHR0cDovLzEyMS4zNi4yMDAuMjIwOjkwMDAnKSAgIFxuXG5cblxuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXG5BcHAubXBUeXBlID0gJ2FwcCdcbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xuICAgIC4uLkFwcFxufSlcbmFwcC4kbW91bnQoKVxuXG5cblxuXG5cblxuXG5cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!*********************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/pages.json ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


if (typeof Promise !== 'undefined' && !Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}

if (uni.restoreGlobal) {
  uni.restoreGlobal(weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
__definePage('pages/index/index', function () {return Vue.extend(__webpack_require__(/*! pages/index/index.vue?mpType=page */ 2).default);});

/***/ }),
/* 2 */
/*!********************************************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/pages/index/index.vue?mpType=page ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 3);\n/* harmony import */ var _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js&mpType=page */ 5);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 8);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/index/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNkg7QUFDN0g7QUFDb0U7QUFDTDs7O0FBRy9EO0FBQytLO0FBQy9LLGdCQUFnQixzTEFBVTtBQUMxQixFQUFFLHNGQUFNO0FBQ1IsRUFBRSwyRkFBTTtBQUNSLEVBQUUsb0dBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJiZTg0YTNjJm1wVHlwZT1wYWdlXCJcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgZmFsc2UsXG4gIGNvbXBvbmVudHMsXG4gIHJlbmRlcmpzXG4pXG5cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFnZXMvaW5kZXgvaW5kZXgudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!**************************************************************************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!
  \**************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 4);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 4 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/Workspace/socketApp/socketAppClient/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "view",
    { staticClass: _vm._$s(0, "sc", "page"), attrs: { _i: 0 } },
    [
      _c(
        "view",
        { staticClass: _vm._$s(1, "sc", "topInput"), attrs: { _i: 1 } },
        [
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.name,
                expression: "name"
              }
            ],
            staticClass: _vm._$s(2, "sc", "inputname"),
            attrs: { _i: 2 },
            domProps: { value: _vm._$s(2, "v-model", _vm.name) },
            on: {
              input: function($event) {
                if ($event.target.composing) {
                  return
                }
                _vm.name = $event.target.value
              }
            }
          }),
          _c("button", {
            staticClass: _vm._$s(3, "sc", "submitName"),
            attrs: { _i: 3 },
            on: { click: _vm.onSubmitName }
          })
        ]
      ),
      _c(
        "view",
        { staticClass: _vm._$s(4, "sc", "messages"), attrs: { _i: 4 } },
        _vm._l(_vm._$s(5, "f", { forItems: _vm.list }), function(
          item,
          index,
          $20,
          $30
        ) {
          return _c(
            "view",
            {
              key: _vm._$s(5, "f", { forIndex: $20, key: index }),
              staticClass: _vm._$s("5-" + $30, "sc", "content"),
              attrs: { _i: "5-" + $30 }
            },
            [
              _c(
                "text",
                {
                  staticClass: _vm._$s("6-" + $30, "sc", "name"),
                  attrs: { _i: "6-" + $30 }
                },
                [_vm._v(_vm._$s("6-" + $30, "t0-0", _vm._s(item.name)))]
              ),
              _c(
                "text",
                {
                  staticClass: _vm._$s("7-" + $30, "sc", "msg"),
                  attrs: { _i: "7-" + $30 }
                },
                [_vm._v(_vm._$s("7-" + $30, "t0-0", _vm._s(item.msg)))]
              )
            ]
          )
        }),
        0
      ),
      _c("view", { staticClass: _vm._$s(8, "sc", "send"), attrs: { _i: 8 } }, [
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.content,
              expression: "content"
            }
          ],
          staticClass: _vm._$s(9, "sc", "input"),
          attrs: { _i: 9 },
          domProps: { value: _vm._$s(9, "v-model", _vm.content) },
          on: {
            input: function($event) {
              if ($event.target.composing) {
                return
              }
              _vm.content = $event.target.value
            }
          }
        }),
        _c("button", {
          staticClass: _vm._$s(10, "sc", "submit"),
          attrs: { _i: 10 },
          on: {
            click: function($event) {
              return _vm.sendMsg()
            }
          }
        })
      ])
    ]
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 5 */
/*!********************************************************************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!../../../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js&mpType=page */ 6);\n/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTRsQixDQUFnQiwwbUJBQUcsRUFBQyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9Qcm9ncmFtcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LTEhLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXVuaS1hcHAtbG9hZGVyL3VzaW5nLWNvbXBvbmVudHMuanMhLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9Qcm9ncmFtcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3dlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uLy4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay11bmktYXBwLWxvYWRlci91c2luZy1jb21wb25lbnRzLmpzIS4uLy4uLy4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/Workspace/socketApp/socketAppClient/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default =\n{\n  /*进入程序时的初始数据*/\n  data: function data() {\n    return {\n      name: '',\n      list: [{\n        \"name\": 'USER',\n        \"msg\": \"Message\" }],\n\n\n      content: '' };\n\n  },\n  /*页面加载完后运行*/\n  onLoad: function onLoad() {\n\n    __f__(\"log\", \"initilize\", \" at pages/index/index.vue:45\");\n    /*建立连接*/\n    this.socket.on('connection', function () {\n      __f__(\"log\", 'connected', \" at pages/index/index.vue:48\");\n    });\n    __f__(\"log\", \"done\", \" at pages/index/index.vue:50\");\n    //监听消息\n    this.recvMsg();\n  },\n  methods: {\n    //消息接收函数\n    recvMsg: function recvMsg() {var _this = this;\n      //接收消息\n      this.socket.on('recvMsg', function (content) {\n        _this.list.push(content);\n        //滑动显示新消息\n        // uni.pageScrollTo({\n        // \tduration: 5,\n        // \tscrollTop:this.list.length* 200\n        // })\n      });\n\n      //接收新用户\n      this.socket.on('newConnection', function (name) {\n        __f__(\"log\", name, \" at pages/index/index.vue:69\");\n      });\n    },\n\n    //向服务器提交用户名\n    onSubmitName: function onSubmitName() {\n      if (this.name) {\n        this.socket.emit('newUser', this.Name);\n      }\n\n    },\n\n    //消息发送函数\n    sendMsg: function sendMsg() {\n      //更新数据表单\n      if (this.content) {\n        this.list.push({\n          \"name\": this.name,\n          \"msg\": this.content });\n\n        //向服务器发送数据\n        this.socket.emit(\n        'sendMessage', {\n          \"name\": this.name,\n          \"msg\": this.content });\n\n        //发送完毕, 清空字符\n        this.content = '';\n        //移动画面\n        uni.pageScrollTo({\n          duration: 5,\n          scorllTop: this.list.length * 200 });\n\n      } else\n      {\n        //发送空字串，提示错误\n        uni.showToast({\n          title: '请不要发送空消息！' });\n\n      }\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvaW5kZXgvaW5kZXgudnVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QkE7QUFDQTtBQUNBLE1BRkEsa0JBRUE7QUFDQTtBQUNBLGNBREE7QUFFQTtBQUNBLHNCQURBO0FBRUEsd0JBRkEsR0FGQTs7O0FBT0EsaUJBUEE7O0FBU0EsR0FaQTtBQWFBO0FBQ0EsUUFkQSxvQkFjQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBRkE7QUFHQTtBQUNBO0FBQ0E7QUFDQSxHQXhCQTtBQXlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FQQTs7QUFTQTtBQUNBO0FBQ0E7QUFDQSxPQUZBO0FBR0EsS0FqQkE7O0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0F6QkE7O0FBMkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFEQTtBQUVBLDZCQUZBOztBQUlBO0FBQ0E7QUFDQSxxQkFEQSxFQUNBO0FBQ0EsMkJBREE7QUFFQSw2QkFGQSxFQURBOztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBREE7QUFFQSwyQ0FGQTs7QUFJQSxPQWxCQTtBQW1CQTtBQUNBO0FBQ0E7QUFDQSw0QkFEQTs7QUFHQTtBQUNBLEtBdkRBLEVBekJBLEUiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuXHQ8dmlldyBjbGFzcz0ncGFnZSc+XHJcblx0XHQ8IS0t6K6+572u5ZCN56ewLS0+XHJcblx0XHQ8dmlldyBjbGFzcz1cInRvcElucHV0XCI+XHJcblx0XHRcdDxpbnB1dCBjbGFzcz0naW5wdXRuYW1lJyB2LW1vZGVsPSduYW1lJyBwbGFjZWhvbGRlcj0nWW91ciBOYW1lJy8+XHJcblx0XHRcdDxidXR0b24gY2xhc3M9J3N1Ym1pdE5hbWUnIEBjbGljaz1cIm9uU3VibWl0TmFtZVwiPkNvbmZpcm08L2J1dHRvbj5cclxuXHRcdDwvdmlldz5cclxuXHRcclxuXHRcdFxyXG5cdFx0PCEtLeaYvuekuua2iOaBry0tPlxyXG5cdFx0PHZpZXcgY2xhc3M9J21lc3NhZ2VzJz5cclxuXHRcdFx0PCEtLemBjeWOhuavj+S4gOadoea2iOaBry0tPlxyXG5cdFx0XHQ8dmlldyBjbGFzcz0nY29udGVudCcgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGxpc3RcIiA6a2V5PSdpbmRleCc+XHJcblx0XHRcdFx0PHRleHQgY2xhc3M9J25hbWUnPnt7aXRlbS5uYW1lfX08L3RleHQ+XHJcblx0XHRcdFx0PHRleHQgY2xhc3M9J21zZyc+e3tpdGVtLm1zZ319PC90ZXh0PlxyXG5cdFx0XHQ8L3ZpZXc+XHJcblx0XHQ8L3ZpZXc+XHJcblx0XHRcclxuXHRcdDwhLS3ovpPlhaXmoYblkozlj5HpgIHmjInpkq4tLT5cclxuXHRcdDx2aWV3IGNsYXNzPSdzZW5kJz5cclxuXHRcdFx0PGlucHV0IGNsYXNzPSdpbnB1dCcgcGxhY2Vob2xkZXI9XCJZb3VyIE1lc3NhZ2VcIiB2LW1vZGVsPVwiY29udGVudFwiIC8+XHJcblx0XHRcdDxidXR0b24gY2xhc3M9J3N1Ym1pdCcgQGNsaWNrPVwic2VuZE1zZygpXCI+U2VuZDwvYnV0dG9uPlxyXG5cdFx0PC92aWV3PlxyXG5cclxuXHQ8L3ZpZXc+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdC8q6L+b5YWl56iL5bqP5pe255qE5Yid5aeL5pWw5o2uKi9cclxuXHRcdGRhdGEoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0bmFtZTogJycsXHJcblx0XHRcdFx0bGlzdDogW3tcclxuXHRcdFx0XHRcdFwibmFtZVwiOiAnVVNFUicsXHJcblx0XHRcdFx0XHRcIm1zZ1wiOiBcIk1lc3NhZ2VcIlxyXG5cclxuXHRcdFx0XHR9XSxcclxuXHRcdFx0XHRjb250ZW50OiAnJ1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0LyrpobXpnaLliqDovb3lrozlkI7ov5DooYwqL1xyXG5cdFx0b25Mb2FkKCkge1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc29sZS5sb2coXCJpbml0aWxpemVcIilcclxuXHRcdFx0Lyrlu7rnq4vov57mjqUqL1xyXG5cdFx0XHR0aGlzLnNvY2tldC5vbignY29ubmVjdGlvbicsICgpID0+IHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnY29ubmVjdGVkJylcclxuXHRcdFx0fSlcclxuXHRcdFx0Y29uc29sZS5sb2coXCJkb25lXCIpXHJcblx0XHRcdC8v55uR5ZCs5raI5oGvXHJcblx0XHRcdHRoaXMucmVjdk1zZygpXHJcblx0XHR9LFxyXG5cdFx0bWV0aG9kczoge1xyXG5cdFx0XHQvL+a2iOaBr+aOpeaUtuWHveaVsFxyXG5cdFx0XHRyZWN2TXNnOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvL+aOpeaUtua2iOaBr1xyXG5cdFx0XHRcdHRoaXMuc29ja2V0Lm9uKCdyZWN2TXNnJywgKGNvbnRlbnQpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMubGlzdC5wdXNoKGNvbnRlbnQpXHJcblx0XHRcdFx0XHQvL+a7keWKqOaYvuekuuaWsOa2iOaBr1xyXG5cdFx0XHRcdFx0Ly8gdW5pLnBhZ2VTY3JvbGxUbyh7XHJcblx0XHRcdFx0XHQvLyBcdGR1cmF0aW9uOiA1LFxyXG5cdFx0XHRcdFx0Ly8gXHRzY3JvbGxUb3A6dGhpcy5saXN0Lmxlbmd0aCogMjAwXHJcblx0XHRcdFx0XHQvLyB9KVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvL+aOpeaUtuaWsOeUqOaIt1xyXG5cdFx0XHRcdHRoaXMuc29ja2V0Lm9uKCduZXdDb25uZWN0aW9uJywgKG5hbWUpID0+IHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKG5hbWUpXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdFxyXG5cdFx0XHQvL+WQkeacjeWKoeWZqOaPkOS6pOeUqOaIt+WQjVxyXG5cdFx0XHRvblN1Ym1pdE5hbWU6ZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRpZih0aGlzLm5hbWUpe1xyXG5cdFx0XHRcdFx0dGhpcy5zb2NrZXQuZW1pdCgnbmV3VXNlcicsIHRoaXMuTmFtZSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdH0sXHJcblx0XHRcdFxyXG5cdFx0XHQvL+a2iOaBr+WPkemAgeWHveaVsFxyXG5cdFx0XHRzZW5kTXNnOmZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0Ly/mm7TmlrDmlbDmja7ooajljZVcclxuXHRcdFx0XHRpZih0aGlzLmNvbnRlbnQpe1xyXG5cdFx0XHRcdFx0dGhpcy5saXN0LnB1c2goe1xyXG5cdFx0XHRcdFx0XHRcIm5hbWVcIjogdGhpcy5uYW1lLFxyXG5cdFx0XHRcdFx0XHRcIm1zZ1wiOiB0aGlzLmNvbnRlbnRcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQvL+WQkeacjeWKoeWZqOWPkemAgeaVsOaNrlxyXG5cdFx0XHRcdFx0dGhpcy5zb2NrZXQuZW1pdChcclxuXHRcdFx0XHRcdCdzZW5kTWVzc2FnZScse1xyXG5cdFx0XHRcdFx0XHRcIm5hbWVcIjp0aGlzLm5hbWUsXHJcblx0XHRcdFx0XHRcdFwibXNnXCI6IHRoaXMuY29udGVudFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHQvL+WPkemAgeWujOavlSwg5riF56m65a2X56ymXHJcblx0XHRcdFx0XHR0aGlzLmNvbnRlbnQ9JydcclxuXHRcdFx0XHRcdC8v56e75Yqo55S76Z2iXHJcblx0XHRcdFx0XHR1bmkucGFnZVNjcm9sbFRvKHtcclxuXHRcdFx0XHRcdFx0ZHVyYXRpb246NSxcclxuXHRcdFx0XHRcdFx0c2NvcmxsVG9wOiB0aGlzLmxpc3QubGVuZ3RoKjIwMFxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0gXHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdC8v5Y+R6YCB56m65a2X5Liy77yM5o+Q56S66ZSZ6K+vXHJcblx0XHRcdFx0XHR1bmkuc2hvd1RvYXN0KHtcclxuXHRcdFx0XHRcdFx0dGl0bGU6J+ivt+S4jeimgeWPkemAgeepuua2iOaBr++8gSdcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuXHRwYWdlIHtcclxuXHRcdHdpZHRoOiA3NTBycHg7XHJcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjM0Y1MzZFO1xyXG5cdH1cclxuXHRcclxuXHQvKumhtumDqOeUqOaIt+WQjeiuvue9riovXHJcblx0LnRvcElucHV0e1xyXG5cdFx0ZGlzcGxheTpmbGV4O1xyXG5cdFx0ZmxleC1kaXJlY3Rpb246cm93O1xyXG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHR9XHJcblx0XHJcblx0LmlucHV0bmFtZXtcclxuXHRcdHdpZHRoOiA4MCU7XHJcblx0XHRoZWlnaHQ6IDYwcnB4O1xyXG5cdFx0Ym9yZGVyLXJhZGl1czogMnJweDtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XHJcblx0fVxyXG5cdFxyXG5cdC5zdWJtaXROYW1le1xyXG5cdFx0d2lkdGg6IDIwJTtcclxuXHRcdGhlaWdodDogNjBycHg7XHJcblx0XHRib3JkZXItcmFkaXVzOiAycnB4O1xyXG5cdFx0ZGlzcGxheTogZmxleDtcclxuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHR9XHJcblx0XHJcblx0Lyrmtojmga/moYYqL1xyXG5cdC5tZXNzYWdlc3tcclxuXHRcdHdpZHRoOiA3MTBycHg7XHJcblx0XHRwYWRkaW5nOiAyMHJweDtcclxuXHR9XHJcblx0XHJcblxyXG5cdC8q5q+P5LiA5p2h5raI5oGv55qE5Y+R6YCB6ICFKi9cclxuXHQubmFtZSB7XHJcblx0XHRtYXJnaW4tcmlnaHQ6IDEwcnB4O1xyXG5cdH1cclxuXHJcblx0Lyrmr4/kuIDmnaHmtojmga/nmoTlhoXlrrkqL1xyXG5cdC5tc2cge1xyXG5cdFx0YmFja2dyb3VuZC1jb2xvcjogI0MwQzBDMDtcclxuXHRcdGJvcmRlci1yYWRpdXM6IDEwcnB4O1xyXG5cdFx0bWFyZ2luOiAyMHJweCAwIDA7XHJcblx0XHRwYWRkaW5nLWxlZnQ6IDEwcnB4O1xyXG5cdFx0cGFkZGluZy1yaWdodDogMTBycHg7XHJcblx0XHRwYWRkaW5nLWJvdHRvbTogNXJweDtcclxuXHR9XHJcblxyXG5cdC8q5bqV6YOo5Y+R6YCB5qih5Z2XKi9cclxuXHQuc2VuZCB7XHJcblx0XHRwb3NpdGlvbjogZml4ZWQ7XHJcblx0XHRib3R0b206IDA7XHJcblx0fVxyXG5cclxuXHQvKuW6lemDqOi+k+WFpeahhiovXHJcblx0LmlucHV0IHtcclxuXHRcdHdpZHRoOiA3MTBycHg7XHJcblx0XHRwYWRkaW5nOiAyMHJweDtcclxuXHRcdGJvcmRlci1yYWRpdXM6IDIwcnB4O1xyXG5cdH1cclxuPC9zdHlsZT5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! exports provided: log, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatLog; });
function typof (v) {
  var s = Object.prototype.toString.call(v)
  return s.substring(8, s.length - 1)
}

function isDebugMode () {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__
}

function jsonStringifyReplacer (k, p) {
  switch (typof(p)) {
    case 'Function':
      return 'function() { [native code] }'
    default :
      return p
  }
}

function log (type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key]
  }
  console[type].apply(console, args)
}

function formatLog () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key]
  }
  var type = args.shift()
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'))
    return console[type].apply(console, args)
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase()

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v, jsonStringifyReplacer) + '---END:JSON---'
      } catch (e) {
        v = type
      }
    } else {
      if (v === null) {
        v = '---NULL---'
      } else if (v === undefined) {
        v = '---UNDEFINED---'
      } else {
        var vType = typof(v).toUpperCase()

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---'
        } else {
          v = String(v)
        }
      }
    }

    return v
  })
  var msg = ''

  if (msgs.length > 1) {
    var lastMsg = msgs.pop()
    msg = msgs.join('---COMMA---')

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg
    } else {
      msg += '---COMMA---' + lastMsg
    }
  } else {
    msg = msgs[0]
  }

  console[type](msg)
}


/***/ }),
/* 8 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 9 */
/*!******************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/App.vue ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 10);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 8);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMOzs7QUFHbEQ7QUFDeUs7QUFDekssZ0JBQWdCLHNMQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNlLGdGIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMsIHJlY3ljbGFibGVSZW5kZXIsIGNvbXBvbmVudHNcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9Qcm9ncmFtcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIkFwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!*******************************************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/App.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib!../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!../../../Programs/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 11);\n/* harmony import */ var _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_Programs_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Programs_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXVqQixDQUFnQiw2bEJBQUcsRUFBQyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vUHJvZ3JhbXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9Qcm9ncmFtcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3dlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay11bmktYXBwLWxvYWRlci91c2luZy1jb21wb25lbnRzLmpzIS4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vUHJvZ3JhbXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9Qcm9ncmFtcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3dlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay11bmktYXBwLWxvYWRlci91c2luZy1jb21wb25lbnRzLmpzIS4uLy4uLy4uL1Byb2dyYW1zL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!D:/Workspace/socketApp/socketAppClient/App.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default =\n{\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:4\");\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:7\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:10\");\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6WyJvbkxhdW5jaCIsIm9uU2hvdyIsIm9uSGlkZSJdLCJtYXBwaW5ncyI6IjtBQUNlO0FBQ2RBLFVBQVEsRUFBRSxvQkFBVztBQUNwQixpQkFBWSxZQUFaO0FBQ0EsR0FIYTtBQUlkQyxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBLEdBTmE7QUFPZEMsUUFBTSxFQUFFLGtCQUFXO0FBQ2xCLGlCQUFZLFVBQVo7QUFDQSxHQVRhLEUiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IHtcblx0b25MYXVuY2g6IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdBcHAgTGF1bmNoJylcblx0fSxcblx0b25TaG93OiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIFNob3cnKVxuXHR9LFxuXHRvbkhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdBcHAgSGlkZScpXG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!******************************************************************!*\
  !*** D:/Workspace/socketApp/socketAppClient/static/socket.io.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * Socket.IO v4.4.0\n * (c) 2014-2021 Guillermo Rauch\n * Released under the MIT License.\n */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n})(this, function () {'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true } });\n\n\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    } else if (call !== void 0) {\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n      result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}\n\n    return arr2;\n  }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n\n        var F = function F() {};\n\n        return {\n          s: F,\n          n: function n() {\n            if (i >= o.length) return {\n              done: true };\n\n            return {\n              done: false,\n              value: o[i++] };\n\n          },\n          e: function e(_e) {\n            throw _e;\n          },\n          f: F };\n\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var normalCompletion = true,\n    didErr = false,\n    err;\n    return {\n      s: function s() {\n        it = it.call(o);\n      },\n      n: function n() {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function e(_e2) {\n        didErr = true;\n        err = _e2;\n      },\n      f: function f() {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      } };\n\n  }\n\n  /**\n     * Parses an URI\n     *\n     * @author Steven Levithan <stevenlevithan.com> (MIT license)\n     * @api private\n     */\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\n\n  var parseuri = function parseuri(str) {\n    var src = str,\n    b = str.indexOf('['),\n    e = str.indexOf(']');\n\n    if (b != -1 && e != -1) {\n      str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m = re.exec(str || ''),\n    uri = {},\n    i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    if (b != -1 && e != -1) {\n      uri.source = src;\n      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n      uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n      uri.ipv6uri = true;\n    }\n\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n  };\n\n  function pathNames(obj, path) {\n    var regx = /\\/{2,9}/g,\n    names = path.replace(regx, \"/\").split(\"/\");\n\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n      names.splice(0, 1);\n    }\n\n    if (path.substr(path.length - 1, 1) == '/') {\n      names.splice(names.length - 1, 1);\n    }\n\n    return names;\n  }\n\n  function queryKey(uri, query) {\n    var data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n      if ($1) {\n        data[$1] = $2;\n      }\n    });\n    return data;\n  }\n\n  /**\n     * URL parser.\n     *\n     * @param uri - url\n     * @param path - the request path of the connection\n     * @param loc - An object meant to mimic window.location.\n     *        Defaults to window.location.\n     * @public\n     */\n\n  function url(uri) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var loc = arguments.length > 2 ? arguments[2] : undefined;\n    var obj = uri; // default to window.location\n\n    loc = loc || typeof location !== \"undefined\" && location;\n    if (null == uri) uri = loc.protocol + \"//\" + loc.host; // relative path support\n\n    if (typeof uri === \"string\") {\n      if (\"/\" === uri.charAt(0)) {\n        if (\"/\" === uri.charAt(1)) {\n          uri = loc.protocol + uri;\n        } else {\n          uri = loc.host + uri;\n        }\n      }\n\n      if (!/^(https?|wss?):\\/\\//.test(uri)) {\n        if (\"undefined\" !== typeof loc) {\n          uri = loc.protocol + \"//\" + uri;\n        } else {\n          uri = \"https://\" + uri;\n        }\n      } // parse\n\n\n      obj = parseuri(uri);\n    } // make sure we treat `localhost:80` and `localhost` equally\n\n\n    if (!obj.port) {\n      if (/^(http|ws)$/.test(obj.protocol)) {\n        obj.port = \"80\";\n      } else if (/^(http|ws)s$/.test(obj.protocol)) {\n        obj.port = \"443\";\n      }\n    }\n\n    obj.path = obj.path || \"/\";\n    var ipv6 = obj.host.indexOf(\":\") !== -1;\n    var host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host; // define unique id\n\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path; // define href\n\n    obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n  }\n\n  var hasCors = { exports: {} };\n\n  /**\n                                  * Module exports.\n                                  *\n                                  * Logic borrowed from Modernizr:\n                                  *\n                                  *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n                                  */\n\n  try {\n    hasCors.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();\n  } catch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n    hasCors.exports = false;\n  }\n\n  var hasCORS = hasCors.exports;\n\n  var globalThis = function () {\n    if (typeof self !== \"undefined\") {\n      return self;\n    } else if (typeof window !== \"undefined\") {\n      return window;\n    } else {\n      return Function(\"return this\")();\n    }\n  }();\n\n  // browser shim for xmlhttprequest module\n  function XMLHttpRequest$1(opts) {\n    var xdomain = opts.xdomain; // XMLHttpRequest can be disabled on IE\n\n    try {\n      if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n        return new XMLHttpRequest();\n      }\n    } catch (e) {}\n\n    if (!xdomain) {\n      try {\n        return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n      } catch (e) {}\n    }\n  }\n\n  function pick(obj) {\n    for (var _len = arguments.length, attr = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      attr[_key - 1] = arguments[_key];\n    }\n\n    return attr.reduce(function (acc, k) {\n      if (obj.hasOwnProperty(k)) {\n        acc[k] = obj[k];\n      }\n\n      return acc;\n    }, {});\n  } // Keep a reference to the real timeout functions so they can be used when overridden\n\n  var NATIVE_SET_TIMEOUT = setTimeout;\n  var NATIVE_CLEAR_TIMEOUT = clearTimeout;\n  function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    } else {\n      obj.setTimeoutFn = setTimeout.bind(globalThis);\n      obj.clearTimeoutFn = clearTimeout.bind(globalThis);\n    }\n  }\n\n  /**\n     * Expose `Emitter`.\n     */\n\n  var Emitter_1 = Emitter;\n  /**\n                            * Initialize a new `Emitter`.\n                            *\n                            * @api public\n                            */\n\n  function Emitter(obj) {\n    if (obj) return mixin(obj);\n  }\n  /**\n     * Mixin the emitter properties.\n     *\n     * @param {Object} obj\n     * @return {Object}\n     * @api private\n     */\n\n\n  function mixin(obj) {\n    for (var key in Emitter.prototype) {\n      obj[key] = Emitter.prototype[key];\n    }\n\n    return obj;\n  }\n  /**\n     * Listen on the given `event` with `fn`.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     * @return {Emitter}\n     * @api public\n     */\n\n\n  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {\n    this._callbacks = this._callbacks || {};\n    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);\n    return this;\n  };\n  /**\n      * Adds an `event` listener that will be invoked a single\n      * time then automatically removed.\n      *\n      * @param {String} event\n      * @param {Function} fn\n      * @return {Emitter}\n      * @api public\n      */\n\n\n  Emitter.prototype.once = function (event, fn) {\n    function on() {\n      this.off(event, on);\n      fn.apply(this, arguments);\n    }\n\n    on.fn = fn;\n    this.on(event, on);\n    return this;\n  };\n  /**\n      * Remove the given callback for `event` or all\n      * registered callbacks.\n      *\n      * @param {String} event\n      * @param {Function} fn\n      * @return {Emitter}\n      * @api public\n      */\n\n\n  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {\n    this._callbacks = this._callbacks || {}; // all\n\n    if (0 == arguments.length) {\n      this._callbacks = {};\n      return this;\n    } // specific event\n\n\n    var callbacks = this._callbacks['$' + event];\n    if (!callbacks) return this; // remove all handlers\n\n    if (1 == arguments.length) {\n      delete this._callbacks['$' + event];\n      return this;\n    } // remove specific handler\n\n\n    var cb;\n\n    for (var i = 0; i < callbacks.length; i++) {\n      cb = callbacks[i];\n\n      if (cb === fn || cb.fn === fn) {\n        callbacks.splice(i, 1);\n        break;\n      }\n    } // Remove event specific arrays for event types that no\n    // one is subscribed for to avoid memory leak.\n\n\n    if (callbacks.length === 0) {\n      delete this._callbacks['$' + event];\n    }\n\n    return this;\n  };\n  /**\n      * Emit `event` with the given args.\n      *\n      * @param {String} event\n      * @param {Mixed} ...\n      * @return {Emitter}\n      */\n\n\n  Emitter.prototype.emit = function (event) {\n    this._callbacks = this._callbacks || {};\n    var args = new Array(arguments.length - 1),\n    callbacks = this._callbacks['$' + event];\n\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    if (callbacks) {\n      callbacks = callbacks.slice(0);\n\n      for (var i = 0, len = callbacks.length; i < len; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n\n    return this;\n  }; // alias used for reserved events (protected method)\n\n\n  Emitter.prototype.emitReserved = Emitter.prototype.emit;\n  /**\n                                                            * Return array of callbacks for `event`.\n                                                            *\n                                                            * @param {String} event\n                                                            * @return {Array}\n                                                            * @api public\n                                                            */\n\n  Emitter.prototype.listeners = function (event) {\n    this._callbacks = this._callbacks || {};\n    return this._callbacks['$' + event] || [];\n  };\n  /**\n      * Check if this emitter has `event` handlers.\n      *\n      * @param {String} event\n      * @return {Boolean}\n      * @api public\n      */\n\n\n  Emitter.prototype.hasListeners = function (event) {\n    return !!this.listeners(event).length;\n  };\n\n  var PACKET_TYPES = Object.create(null); // no Map = no polyfill\n\n  PACKET_TYPES[\"open\"] = \"0\";\n  PACKET_TYPES[\"close\"] = \"1\";\n  PACKET_TYPES[\"ping\"] = \"2\";\n  PACKET_TYPES[\"pong\"] = \"3\";\n  PACKET_TYPES[\"message\"] = \"4\";\n  PACKET_TYPES[\"upgrade\"] = \"5\";\n  PACKET_TYPES[\"noop\"] = \"6\";\n  var PACKET_TYPES_REVERSE = Object.create(null);\n  Object.keys(PACKET_TYPES).forEach(function (key) {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n  });\n  var ERROR_PACKET = {\n    type: \"error\",\n    data: \"parser error\" };\n\n\n  var withNativeBlob$1 = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\";\n  var withNativeArrayBuffer$2 = typeof ArrayBuffer === \"function\"; // ArrayBuffer.isView method is not defined in IE10\n\n  var isView$1 = function isView(obj) {\n    return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;\n  };\n\n  var encodePacket = function encodePacket(_ref, supportsBinary, callback) {\n    var type = _ref.type,\n    data = _ref.data;\n\n    if (withNativeBlob$1 && data instanceof Blob) {\n      if (supportsBinary) {\n        return callback(data);\n      } else {\n        return encodeBlobAsBase64(data, callback);\n      }\n    } else if (withNativeArrayBuffer$2 && (data instanceof ArrayBuffer || isView$1(data))) {\n      if (supportsBinary) {\n        return callback(data);\n      } else {\n        return encodeBlobAsBase64(new Blob([data]), callback);\n      }\n    } // plain string\n\n\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n  };\n\n  var encodeBlobAsBase64 = function encodeBlobAsBase64(data, callback) {\n    var fileReader = new FileReader();\n\n    fileReader.onload = function () {\n      var content = fileReader.result.split(\",\")[1];\n      callback(\"b\" + content);\n    };\n\n    return fileReader.readAsDataURL(data);\n  };\n\n  /*\n      * base64-arraybuffer 1.0.1 <https://github.com/niklasvh/base64-arraybuffer>\n      * Copyright (c) 2021 Niklas von Hertzen <https://hertzen.com>\n      * Released under MIT License\n      */\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.\n\n  var lookup$1 = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\n\n  for (var i$1 = 0; i$1 < chars.length; i$1++) {\n    lookup$1[chars.charCodeAt(i$1)] = i$1;\n  }\n\n  var decode$1 = function decode(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length,\n    i,\n    p = 0,\n    encoded1,\n    encoded2,\n    encoded3,\n    encoded4;\n\n    if (base64[base64.length - 1] === '=') {\n      bufferLength--;\n\n      if (base64[base64.length - 2] === '=') {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n      encoded1 = lookup$1[base64.charCodeAt(i)];\n      encoded2 = lookup$1[base64.charCodeAt(i + 1)];\n      encoded3 = lookup$1[base64.charCodeAt(i + 2)];\n      encoded4 = lookup$1[base64.charCodeAt(i + 3)];\n      bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n\n    return arraybuffer;\n  };\n\n  var withNativeArrayBuffer$1 = typeof ArrayBuffer === \"function\";\n\n  var decodePacket = function decodePacket(encodedPacket, binaryType) {\n    if (typeof encodedPacket !== \"string\") {\n      return {\n        type: \"message\",\n        data: mapBinary(encodedPacket, binaryType) };\n\n    }\n\n    var type = encodedPacket.charAt(0);\n\n    if (type === \"b\") {\n      return {\n        type: \"message\",\n        data: decodeBase64Packet(encodedPacket.substring(1), binaryType) };\n\n    }\n\n    var packetType = PACKET_TYPES_REVERSE[type];\n\n    if (!packetType) {\n      return ERROR_PACKET;\n    }\n\n    return encodedPacket.length > 1 ? {\n      type: PACKET_TYPES_REVERSE[type],\n      data: encodedPacket.substring(1) } :\n    {\n      type: PACKET_TYPES_REVERSE[type] };\n\n  };\n\n  var decodeBase64Packet = function decodeBase64Packet(data, binaryType) {\n    if (withNativeArrayBuffer$1) {\n      var decoded = decode$1(data);\n      return mapBinary(decoded, binaryType);\n    } else {\n      return {\n        base64: true,\n        data: data };\n      // fallback for old browsers\n    }\n  };\n\n  var mapBinary = function mapBinary(data, binaryType) {\n    switch (binaryType) {\n      case \"blob\":\n        return data instanceof ArrayBuffer ? new Blob([data]) : data;\n\n      case \"arraybuffer\":\n      default:\n        return data;\n      // assuming the data is already an ArrayBuffer\n    }\n  };\n\n  var SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\n  var encodePayload = function encodePayload(packets, callback) {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    var length = packets.length;\n    var encodedPackets = new Array(length);\n    var count = 0;\n    packets.forEach(function (packet, i) {\n      // force base64 encoding for binary packets\n      encodePacket(packet, false, function (encodedPacket) {\n        encodedPackets[i] = encodedPacket;\n\n        if (++count === length) {\n          callback(encodedPackets.join(SEPARATOR));\n        }\n      });\n    });\n  };\n\n  var decodePayload = function decodePayload(encodedPayload, binaryType) {\n    var encodedPackets = encodedPayload.split(SEPARATOR);\n    var packets = [];\n\n    for (var i = 0; i < encodedPackets.length; i++) {\n      var decodedPacket = decodePacket(encodedPackets[i], binaryType);\n      packets.push(decodedPacket);\n\n      if (decodedPacket.type === \"error\") {\n        break;\n      }\n    }\n\n    return packets;\n  };\n\n  var protocol$1 = 4;\n\n  var Transport = /*#__PURE__*/function (_Emitter) {\n    _inherits(Transport, _Emitter);\n\n    var _super = _createSuper(Transport);\n\n    /**\n                                           * Transport abstract constructor.\n                                           *\n                                           * @param {Object} options.\n                                           * @api private\n                                           */\n    function Transport(opts) {\n      var _this;\n\n      _classCallCheck(this, Transport);\n\n      _this = _super.call(this);\n      _this.writable = false;\n      installTimerFunctions(_assertThisInitialized(_this), opts);\n      _this.opts = opts;\n      _this.query = opts.query;\n      _this.readyState = \"\";\n      _this.socket = opts.socket;\n      return _this;\n    }\n    /**\n       * Emits an error.\n       *\n       * @param {String} str\n       * @return {Transport} for chaining\n       * @api protected\n       */\n\n\n    _createClass(Transport, [{\n      key: \"onError\",\n      value: function onError(msg, desc) {\n        var err = new Error(msg); // @ts-ignore\n\n        err.type = \"TransportError\"; // @ts-ignore\n\n        err.description = desc;\n\n        _get(_getPrototypeOf(Transport.prototype), \"emit\", this).call(this, \"error\", err);\n\n        return this;\n      }\n      /**\n         * Opens the transport.\n         *\n         * @api public\n         */ },\n\n    {\n      key: \"open\",\n      value: function open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n          this.readyState = \"opening\";\n          this.doOpen();\n        }\n\n        return this;\n      }\n      /**\n         * Closes the transport.\n         *\n         * @api public\n         */ },\n\n    {\n      key: \"close\",\n      value: function close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n          this.doClose();\n          this.onClose();\n        }\n\n        return this;\n      }\n      /**\n         * Sends multiple packets.\n         *\n         * @param {Array} packets\n         * @api public\n         */ },\n\n    {\n      key: \"send\",\n      value: function send(packets) {\n        if (\"open\" === this.readyState) {\n          this.write(packets);\n        }\n      }\n      /**\n         * Called upon open\n         *\n         * @api protected\n         */ },\n\n    {\n      key: \"onOpen\",\n      value: function onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n\n        _get(_getPrototypeOf(Transport.prototype), \"emit\", this).call(this, \"open\");\n      }\n      /**\n         * Called with data.\n         *\n         * @param {String} data\n         * @api protected\n         */ },\n\n    {\n      key: \"onData\",\n      value: function onData(data) {\n        var packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n      }\n      /**\n         * Called with a decoded packet.\n         *\n         * @api protected\n         */ },\n\n    {\n      key: \"onPacket\",\n      value: function onPacket(packet) {\n        _get(_getPrototypeOf(Transport.prototype), \"emit\", this).call(this, \"packet\", packet);\n      }\n      /**\n         * Called upon close.\n         *\n         * @api protected\n         */ },\n\n    {\n      key: \"onClose\",\n      value: function onClose() {\n        this.readyState = \"closed\";\n\n        _get(_getPrototypeOf(Transport.prototype), \"emit\", this).call(this, \"close\");\n      } }]);\n\n\n    return Transport;\n  }(Emitter_1);\n\n  var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),\n  length = 64,\n  map = {},\n  seed = 0,\n  i = 0,\n  prev;\n  /**\n         * Return a string representing the specified number.\n         *\n         * @param {Number} num The number to convert.\n         * @returns {String} The string representation of the number.\n         * @api public\n         */\n\n  function encode(num) {\n    var encoded = '';\n\n    do {\n      encoded = alphabet[num % length] + encoded;\n      num = Math.floor(num / length);\n    } while (num > 0);\n\n    return encoded;\n  }\n  /**\n     * Return the integer value specified by the given string.\n     *\n     * @param {String} str The string to convert.\n     * @returns {Number} The integer value represented by the string.\n     * @api public\n     */\n\n\n  function decode(str) {\n    var decoded = 0;\n\n    for (i = 0; i < str.length; i++) {\n      decoded = decoded * length + map[str.charAt(i)];\n    }\n\n    return decoded;\n  }\n  /**\n     * Yeast: A tiny growing id generator.\n     *\n     * @returns {String} A unique id.\n     * @api public\n     */\n\n\n  function yeast() {\n    var now = encode(+new Date());\n    if (now !== prev) return seed = 0, prev = now;\n    return now + '.' + encode(seed++);\n  } //\n  // Map each character to its index.\n  //\n\n\n  for (; i < length; i++) {\n    map[alphabet[i]] = i;\n  } //\n  // Expose the `yeast`, `encode` and `decode` functions.\n  //\n\n\n  yeast.encode = encode;\n  yeast.decode = decode;\n  var yeast_1 = yeast;\n\n  var parseqs = {};\n\n  /**\n                     * Compiles a querystring\n                     * Returns string representation of the object\n                     *\n                     * @param {Object}\n                     * @api private\n                     */\n\n  parseqs.encode = function (obj) {\n    var str = '';\n\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        if (str.length) str += '&';\n        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n      }\n    }\n\n    return str;\n  };\n  /**\n      * Parses a simple querystring into an object\n      *\n      * @param {String} qs\n      * @api private\n      */\n\n\n  parseqs.decode = function (qs) {\n    var qry = {};\n    var pairs = qs.split('&');\n\n    for (var i = 0, l = pairs.length; i < l; i++) {\n      var pair = pairs[i].split('=');\n      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n\n    return qry;\n  };\n\n  var Polling = /*#__PURE__*/function (_Transport) {\n    _inherits(Polling, _Transport);\n\n    var _super = _createSuper(Polling);\n\n    function Polling() {\n      var _this;\n\n      _classCallCheck(this, Polling);\n\n      _this = _super.apply(this, arguments);\n      _this.polling = false;\n      return _this;\n    }\n    /**\n       * Transport name.\n       */\n\n\n    _createClass(Polling, [{\n      key: \"name\",\n      get: function get() {\n        return \"polling\";\n      }\n      /**\n         * Opens the socket (triggers polling). We write a PING message to determine\n         * when the transport is open.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"doOpen\",\n      value: function doOpen() {\n        this.poll();\n      }\n      /**\n         * Pauses polling.\n         *\n         * @param {Function} callback upon buffers are flushed and transport is paused\n         * @api private\n         */ },\n\n    {\n      key: \"pause\",\n      value: function pause(onPause) {\n        var _this2 = this;\n\n        this.readyState = \"pausing\";\n\n        var pause = function pause() {\n          _this2.readyState = \"paused\";\n          onPause();\n        };\n\n        if (this.polling || !this.writable) {\n          var total = 0;\n\n          if (this.polling) {\n            total++;\n            this.once(\"pollComplete\", function () {\n              --total || pause();\n            });\n          }\n\n          if (!this.writable) {\n            total++;\n            this.once(\"drain\", function () {\n              --total || pause();\n            });\n          }\n        } else {\n          pause();\n        }\n      }\n      /**\n         * Starts polling cycle.\n         *\n         * @api public\n         */ },\n\n    {\n      key: \"poll\",\n      value: function poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emit(\"poll\");\n      }\n      /**\n         * Overloads onData to detect payloads.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onData\",\n      value: function onData(data) {\n        var _this3 = this;\n\n        var callback = function callback(packet) {\n          // if its the first message we consider the transport open\n          if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n            _this3.onOpen();\n          } // if its a close packet, we close the ongoing requests\n\n\n          if (\"close\" === packet.type) {\n            _this3.onClose();\n\n            return false;\n          } // otherwise bypass onData and handle the message\n\n\n          _this3.onPacket(packet);\n        }; // decode payload\n\n\n        decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n        if (\"closed\" !== this.readyState) {\n          // if we got data we're not polling\n          this.polling = false;\n          this.emit(\"pollComplete\");\n\n          if (\"open\" === this.readyState) {\n            this.poll();\n          }\n        }\n      }\n      /**\n         * For polling, send a close packet.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"doClose\",\n      value: function doClose() {\n        var _this4 = this;\n\n        var close = function close() {\n          _this4.write([{\n            type: \"close\" }]);\n\n        };\n\n        if (\"open\" === this.readyState) {\n          close();\n        } else {\n          // in case we're trying to close while\n          // handshaking is in progress (GH-164)\n          this.once(\"open\", close);\n        }\n      }\n      /**\n         * Writes a packets payload.\n         *\n         * @param {Array} data packets\n         * @param {Function} drain callback\n         * @api private\n         */ },\n\n    {\n      key: \"write\",\n      value: function write(packets) {\n        var _this5 = this;\n\n        this.writable = false;\n        encodePayload(packets, function (data) {\n          _this5.doWrite(data, function () {\n            _this5.writable = true;\n\n            _this5.emit(\"drain\");\n          });\n        });\n      }\n      /**\n         * Generates uri for connection.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"uri\",\n      value: function uri() {\n        var query = this.query || {};\n        var schema = this.opts.secure ? \"https\" : \"http\";\n        var port = \"\"; // cache busting is forced\n\n        if (false !== this.opts.timestampRequests) {\n          query[this.opts.timestampParam] = yeast_1();\n        }\n\n        if (!this.supportsBinary && !query.sid) {\n          query.b64 = 1;\n        } // avoid port if default for schema\n\n\n        if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n          port = \":\" + this.opts.port;\n        }\n\n        var encodedQuery = parseqs.encode(query);\n        var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n      } }]);\n\n\n    return Polling;\n  }(Transport);\n\n  /**\n                 * Empty function\n                 */\n\n  function empty() {}\n\n  var hasXHR2 = function () {\n    var xhr = new XMLHttpRequest$1({\n      xdomain: false });\n\n    return null != xhr.responseType;\n  }();\n\n  var XHR = /*#__PURE__*/function (_Polling) {\n    _inherits(XHR, _Polling);\n\n    var _super = _createSuper(XHR);\n\n    /**\n                                     * XHR Polling constructor.\n                                     *\n                                     * @param {Object} opts\n                                     * @api public\n                                     */\n    function XHR(opts) {\n      var _this;\n\n      _classCallCheck(this, XHR);\n\n      _this = _super.call(this, opts);\n\n      if (typeof location !== \"undefined\") {\n        var isSSL = \"https:\" === location.protocol;\n        var port = location.port; // some user agents have empty `location.port`\n\n        if (!port) {\n          port = isSSL ? \"443\" : \"80\";\n        }\n\n        _this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n        _this.xs = opts.secure !== isSSL;\n      }\n      /**\n         * XHR supports binary\n         */\n\n\n      var forceBase64 = opts && opts.forceBase64;\n      _this.supportsBinary = hasXHR2 && !forceBase64;\n      return _this;\n    }\n    /**\n       * Creates a request.\n       *\n       * @param {String} method\n       * @api private\n       */\n\n\n    _createClass(XHR, [{\n      key: \"request\",\n      value: function request() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _extends(opts, {\n          xd: this.xd,\n          xs: this.xs },\n        this.opts);\n\n        return new Request(this.uri(), opts);\n      }\n      /**\n         * Sends data.\n         *\n         * @param {String} data to send.\n         * @param {Function} called upon flush.\n         * @api private\n         */ },\n\n    {\n      key: \"doWrite\",\n      value: function doWrite(data, fn) {\n        var _this2 = this;\n\n        var req = this.request({\n          method: \"POST\",\n          data: data });\n\n        req.on(\"success\", fn);\n        req.on(\"error\", function (err) {\n          _this2.onError(\"xhr post error\", err);\n        });\n      }\n      /**\n         * Starts a poll cycle.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"doPoll\",\n      value: function doPoll() {\n        var _this3 = this;\n\n        var req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", function (err) {\n          _this3.onError(\"xhr poll error\", err);\n        });\n        this.pollXhr = req;\n      } }]);\n\n\n    return XHR;\n  }(Polling);\n  var Request = /*#__PURE__*/function (_Emitter) {\n    _inherits(Request, _Emitter);\n\n    var _super2 = _createSuper(Request);\n\n    /**\n                                          * Request constructor\n                                          *\n                                          * @param {Object} options\n                                          * @api public\n                                          */\n    function Request(uri, opts) {\n      var _this4;\n\n      _classCallCheck(this, Request);\n\n      _this4 = _super2.call(this);\n      installTimerFunctions(_assertThisInitialized(_this4), opts);\n      _this4.opts = opts;\n      _this4.method = opts.method || \"GET\";\n      _this4.uri = uri;\n      _this4.async = false !== opts.async;\n      _this4.data = undefined !== opts.data ? opts.data : null;\n\n      _this4.create();\n\n      return _this4;\n    }\n    /**\n       * Creates the XHR object and sends the request.\n       *\n       * @api private\n       */\n\n\n    _createClass(Request, [{\n      key: \"create\",\n      value: function create() {\n        var _this5 = this;\n\n        var opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        var xhr = this.xhr = new XMLHttpRequest$1(opts);\n\n        try {\n          xhr.open(this.method, this.uri, this.async);\n\n          try {\n            if (this.opts.extraHeaders) {\n              xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n              for (var i in this.opts.extraHeaders) {\n                if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                  xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                }\n              }\n            }\n          } catch (e) {}\n\n          if (\"POST\" === this.method) {\n            try {\n              xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n            } catch (e) {}\n          }\n\n          try {\n            xhr.setRequestHeader(\"Accept\", \"*/*\");\n          } catch (e) {} // ie6 check\n\n\n          if (\"withCredentials\" in xhr) {\n            xhr.withCredentials = this.opts.withCredentials;\n          }\n\n          if (this.opts.requestTimeout) {\n            xhr.timeout = this.opts.requestTimeout;\n          }\n\n          xhr.onreadystatechange = function () {\n            if (4 !== xhr.readyState) return;\n\n            if (200 === xhr.status || 1223 === xhr.status) {\n              _this5.onLoad();\n            } else {\n              // make sure the `error` event handler that's user-set\n              // does not throw in the same tick and gets caught here\n              _this5.setTimeoutFn(function () {\n                _this5.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n              }, 0);\n            }\n          };\n\n          xhr.send(this.data);\n        } catch (e) {\n          // Need to defer since .create() is called directly from the constructor\n          // and thus the 'error' event can only be only bound *after* this exception\n          // occurs.  Therefore, also, we cannot throw here at all.\n          this.setTimeoutFn(function () {\n            _this5.onError(e);\n          }, 0);\n          return;\n        }\n\n        if (typeof document !== \"undefined\") {\n          this.index = Request.requestsCount++;\n          Request.requests[this.index] = this;\n        }\n      }\n      /**\n         * Called upon successful response.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onSuccess\",\n      value: function onSuccess() {\n        this.emit(\"success\");\n        this.cleanup();\n      }\n      /**\n         * Called if we have data.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onData\",\n      value: function onData(data) {\n        this.emit(\"data\", data);\n        this.onSuccess();\n      }\n      /**\n         * Called upon error.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onError\",\n      value: function onError(err) {\n        this.emit(\"error\", err);\n        this.cleanup(true);\n      }\n      /**\n         * Cleans up house.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"cleanup\",\n      value: function cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n          return;\n        }\n\n        this.xhr.onreadystatechange = empty;\n\n        if (fromError) {\n          try {\n            this.xhr.abort();\n          } catch (e) {}\n        }\n\n        if (typeof document !== \"undefined\") {\n          delete Request.requests[this.index];\n        }\n\n        this.xhr = null;\n      }\n      /**\n         * Called upon load.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onLoad\",\n      value: function onLoad() {\n        var data = this.xhr.responseText;\n\n        if (data !== null) {\n          this.onData(data);\n        }\n      }\n      /**\n         * Aborts the request.\n         *\n         * @api public\n         */ },\n\n    {\n      key: \"abort\",\n      value: function abort() {\n        this.cleanup();\n      } }]);\n\n\n    return Request;\n  }(Emitter_1);\n  Request.requestsCount = 0;\n  Request.requests = {};\n  /**\n                          * Aborts pending requests when unloading the window. This is needed to prevent\n                          * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n                          * emitted.\n                          */\n\n  if (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n      // @ts-ignore\n      attachEvent(\"onunload\", unloadHandler);\n    } else if (typeof addEventListener === \"function\") {\n      var terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n      addEventListener(terminationEvent, unloadHandler, false);\n    }\n  }\n\n  function unloadHandler() {\n    for (var i in Request.requests) {\n      if (Request.requests.hasOwnProperty(i)) {\n        Request.requests[i].abort();\n      }\n    }\n  }\n\n  var nextTick = function () {\n    var isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n\n    if (isPromiseAvailable) {\n      return function (cb) {\n        return Promise.resolve().then(cb);\n      };\n    } else {\n      return function (cb, setTimeoutFn) {\n        return setTimeoutFn(cb, 0);\n      };\n    }\n  }();\n  var WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\n  var usingBrowserWebSocket = true;\n  var defaultBinaryType = \"arraybuffer\";\n\n  var isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n  var WS = /*#__PURE__*/function (_Transport) {\n    _inherits(WS, _Transport);\n\n    var _super = _createSuper(WS);\n\n    /**\n                                    * WebSocket transport constructor.\n                                    *\n                                    * @api {Object} connection options\n                                    * @api public\n                                    */\n    function WS(opts) {\n      var _this;\n\n      _classCallCheck(this, WS);\n\n      _this = _super.call(this, opts);\n      _this.supportsBinary = !opts.forceBase64;\n      return _this;\n    }\n    /**\n       * Transport name.\n       *\n       * @api public\n       */\n\n\n    _createClass(WS, [{\n      key: \"name\",\n      get: function get() {\n        return \"websocket\";\n      }\n      /**\n         * Opens socket.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"doOpen\",\n      value: function doOpen() {\n        if (!this.check()) {\n          // let probe timeout\n          return;\n        }\n\n        var uri = this.uri();\n        var protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n        var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n        if (this.opts.extraHeaders) {\n          opts.headers = this.opts.extraHeaders;\n        }\n\n        try {\n          this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n        } catch (err) {\n          return this.emit(\"error\", err);\n        }\n\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n      }\n      /**\n         * Adds event listeners to the socket\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"addEventListeners\",\n      value: function addEventListeners() {\n        var _this2 = this;\n\n        this.ws.onopen = function () {\n          if (_this2.opts.autoUnref) {\n            _this2.ws._socket.unref();\n          }\n\n          _this2.onOpen();\n        };\n\n        this.ws.onclose = this.onClose.bind(this);\n\n        this.ws.onmessage = function (ev) {\n          return _this2.onData(ev.data);\n        };\n\n        this.ws.onerror = function (e) {\n          return _this2.onError(\"websocket error\", e);\n        };\n      }\n      /**\n         * Writes data to socket.\n         *\n         * @param {Array} array of packets.\n         * @api private\n         */ },\n\n    {\n      key: \"write\",\n      value: function write(packets) {\n        var _this3 = this;\n\n        this.writable = false; // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n\n        var _loop = function _loop(i) {\n          var packet = packets[i];\n          var lastPacket = i === packets.length - 1;\n          encodePacket(packet, _this3.supportsBinary, function (data) {\n            // always create a new object (GH-437)\n            var opts = {};\n            // have a chance of informing us about it yet, in that case send will\n            // throw an error\n\n\n            try {\n              if (usingBrowserWebSocket) {\n                // TypeError is thrown when passing the second argument on Safari\n                _this3.ws.send(data);\n              }\n            } catch (e) {}\n\n            if (lastPacket) {\n              // fake drain\n              // defer to next tick to allow Socket to clear writeBuffer\n              nextTick(function () {\n                _this3.writable = true;\n\n                _this3.emit(\"drain\");\n              }, _this3.setTimeoutFn);\n            }\n          });\n        };\n\n        for (var i = 0; i < packets.length; i++) {\n          _loop(i);\n        }\n      }\n      /**\n         * Closes socket.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"doClose\",\n      value: function doClose() {\n        if (typeof this.ws !== \"undefined\") {\n          this.ws.close();\n          this.ws = null;\n        }\n      }\n      /**\n         * Generates uri for connection.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"uri\",\n      value: function uri() {\n        var query = this.query || {};\n        var schema = this.opts.secure ? \"wss\" : \"ws\";\n        var port = \"\"; // avoid port if default for schema\n\n        if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n          port = \":\" + this.opts.port;\n        } // append timestamp to URI\n\n\n        if (this.opts.timestampRequests) {\n          query[this.opts.timestampParam] = yeast_1();\n        } // communicate binary support capabilities\n\n\n        if (!this.supportsBinary) {\n          query.b64 = 1;\n        }\n\n        var encodedQuery = parseqs.encode(query);\n        var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n      }\n      /**\n         * Feature detection for WebSocket.\n         *\n         * @return {Boolean} whether this transport is available.\n         * @api public\n         */ },\n\n    {\n      key: \"check\",\n      value: function check() {\n        return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n      } }]);\n\n\n    return WS;\n  }(Transport);\n\n  var transports = {\n    websocket: WS,\n    polling: XHR };\n\n\n  var Socket$1 = /*#__PURE__*/function (_Emitter) {\n    _inherits(Socket, _Emitter);\n\n    var _super = _createSuper(Socket);\n\n    /**\n                                        * Socket constructor.\n                                        *\n                                        * @param {String|Object} uri or options\n                                        * @param {Object} opts - options\n                                        * @api public\n                                        */\n    function Socket(uri) {\n      var _this;\n\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Socket);\n\n      _this = _super.call(this);\n\n      if (uri && \"object\" === _typeof(uri)) {\n        opts = uri;\n        uri = null;\n      }\n\n      if (uri) {\n        uri = parseuri(uri);\n        opts.hostname = uri.host;\n        opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n        opts.port = uri.port;\n        if (uri.query) opts.query = uri.query;\n      } else if (opts.host) {\n        opts.hostname = parseuri(opts.host).host;\n      }\n\n      installTimerFunctions(_assertThisInitialized(_this), opts);\n      _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = _this.secure ? \"443\" : \"80\";\n      }\n\n      _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n      _this.transports = opts.transports || [\"polling\", \"websocket\"];\n      _this.readyState = \"\";\n      _this.writeBuffer = [];\n      _this.prevBufferLen = 0;\n      _this.opts = _extends({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024 },\n\n        transportOptions: {},\n        closeOnBeforeunload: true },\n      opts);\n      _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n      if (typeof _this.opts.query === \"string\") {\n        _this.opts.query = parseqs.decode(_this.opts.query);\n      } // set on handshake\n\n\n      _this.id = null;\n      _this.upgrades = null;\n      _this.pingInterval = null;\n      _this.pingTimeout = null; // set on heartbeat\n\n      _this.pingTimeoutTimer = null;\n\n      if (typeof addEventListener === \"function\") {\n        if (_this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          addEventListener(\"beforeunload\", function () {\n            if (_this.transport) {\n              // silently close the transport\n              _this.transport.removeAllListeners();\n\n              _this.transport.close();\n            }\n          }, false);\n        }\n\n        if (_this.hostname !== \"localhost\") {\n          _this.offlineEventListener = function () {\n            _this.onClose(\"transport close\");\n          };\n\n          addEventListener(\"offline\", _this.offlineEventListener, false);\n        }\n      }\n\n      _this.open();\n\n      return _this;\n    }\n    /**\n       * Creates transport of the given type.\n       *\n       * @param {String} transport name\n       * @return {Transport}\n       * @api private\n       */\n\n\n    _createClass(Socket, [{\n      key: \"createTransport\",\n      value: function createTransport(name) {\n        var query = clone(this.opts.query); // append engine.io protocol identifier\n\n        query.EIO = protocol$1; // transport name\n\n        query.transport = name; // session id if we already have one\n\n        if (this.id) query.sid = this.id;\n\n        var opts = _extends({}, this.opts.transportOptions[name], this.opts, {\n          query: query,\n          socket: this,\n          hostname: this.hostname,\n          secure: this.secure,\n          port: this.port });\n\n\n        return new transports[name](opts);\n      }\n      /**\n         * Initializes transport to use and starts probe.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"open\",\n      value: function open() {\n        var _this2 = this;\n\n        var transport;\n\n        if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n          transport = \"websocket\";\n        } else if (0 === this.transports.length) {\n          // Emit error on next tick so it can be listened to\n          this.setTimeoutFn(function () {\n            _this2.emitReserved(\"error\", \"No transports available\");\n          }, 0);\n          return;\n        } else {\n          transport = this.transports[0];\n        }\n\n        this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n        try {\n          transport = this.createTransport(transport);\n        } catch (e) {\n          this.transports.shift();\n          this.open();\n          return;\n        }\n\n        transport.open();\n        this.setTransport(transport);\n      }\n      /**\n         * Sets the current transport. Disables the existing one (if any).\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"setTransport\",\n      value: function setTransport(transport) {\n        var _this3 = this;\n\n        if (this.transport) {\n          this.transport.removeAllListeners();\n        } // set up transport\n\n\n        this.transport = transport; // set up transport listeners\n\n        transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function () {\n          _this3.onClose(\"transport close\");\n        });\n      }\n      /**\n         * Probes a transport.\n         *\n         * @param {String} transport name\n         * @api private\n         */ },\n\n    {\n      key: \"probe\",\n      value: function probe(name) {\n        var _this4 = this;\n\n        var transport = this.createTransport(name);\n        var failed = false;\n        Socket.priorWebsocketSuccess = false;\n\n        var onTransportOpen = function onTransportOpen() {\n          if (failed) return;\n          transport.send([{\n            type: \"ping\",\n            data: \"probe\" }]);\n\n          transport.once(\"packet\", function (msg) {\n            if (failed) return;\n\n            if (\"pong\" === msg.type && \"probe\" === msg.data) {\n              _this4.upgrading = true;\n\n              _this4.emitReserved(\"upgrading\", transport);\n\n              if (!transport) return;\n              Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n              _this4.transport.pause(function () {\n                if (failed) return;\n                if (\"closed\" === _this4.readyState) return;\n                cleanup();\n\n                _this4.setTransport(transport);\n\n                transport.send([{\n                  type: \"upgrade\" }]);\n\n\n                _this4.emitReserved(\"upgrade\", transport);\n\n                transport = null;\n                _this4.upgrading = false;\n\n                _this4.flush();\n              });\n            } else {\n              var err = new Error(\"probe error\"); // @ts-ignore\n\n              err.transport = transport.name;\n\n              _this4.emitReserved(\"upgradeError\", err);\n            }\n          });\n        };\n\n        function freezeTransport() {\n          if (failed) return; // Any callback called by transport should be ignored since now\n\n          failed = true;\n          cleanup();\n          transport.close();\n          transport = null;\n        } // Handle any error that happens while probing\n\n\n        var onerror = function onerror(err) {\n          var error = new Error(\"probe error: \" + err); // @ts-ignore\n\n          error.transport = transport.name;\n          freezeTransport();\n\n          _this4.emitReserved(\"upgradeError\", error);\n        };\n\n        function onTransportClose() {\n          onerror(\"transport closed\");\n        } // When the socket is closed while we're probing\n\n\n        function onclose() {\n          onerror(\"socket closed\");\n        } // When the socket is upgraded while we're probing\n\n\n        function onupgrade(to) {\n          if (transport && to.name !== transport.name) {\n            freezeTransport();\n          }\n        } // Remove all listeners on the transport and on self\n\n\n        var cleanup = function cleanup() {\n          transport.removeListener(\"open\", onTransportOpen);\n          transport.removeListener(\"error\", onerror);\n          transport.removeListener(\"close\", onTransportClose);\n\n          _this4.off(\"close\", onclose);\n\n          _this4.off(\"upgrading\", onupgrade);\n        };\n\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n      }\n      /**\n         * Called when connection is deemed open.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onOpen\",\n      value: function onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush(); // we check for `readyState` in case an `open`\n        // listener already closed the socket\n\n        if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n          var i = 0;\n          var l = this.upgrades.length;\n\n          for (; i < l; i++) {\n            this.probe(this.upgrades[i]);\n          }\n        }\n      }\n      /**\n         * Handles a packet.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onPacket\",\n      value: function onPacket(packet) {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n          this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n          this.emitReserved(\"heartbeat\");\n\n          switch (packet.type) {\n            case \"open\":\n              this.onHandshake(JSON.parse(packet.data));\n              break;\n\n            case \"ping\":\n              this.resetPingTimeout();\n              this.sendPacket(\"pong\");\n              this.emitReserved(\"ping\");\n              this.emitReserved(\"pong\");\n              break;\n\n            case \"error\":\n              var err = new Error(\"server error\"); // @ts-ignore\n\n              err.code = packet.data;\n              this.onError(err);\n              break;\n\n            case \"message\":\n              this.emitReserved(\"data\", packet.data);\n              this.emitReserved(\"message\", packet.data);\n              break;}\n\n        }\n      }\n      /**\n         * Called upon handshake completion.\n         *\n         * @param {Object} data - handshake obj\n         * @api private\n         */ },\n\n    {\n      key: \"onHandshake\",\n      value: function onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.onOpen(); // In case open handler closes socket\n\n        if (\"closed\" === this.readyState) return;\n        this.resetPingTimeout();\n      }\n      /**\n         * Sets and resets ping timeout timer based on server pings.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"resetPingTimeout\",\n      value: function resetPingTimeout() {\n        var _this5 = this;\n\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(function () {\n          _this5.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n\n        if (this.opts.autoUnref) {\n          this.pingTimeoutTimer.unref();\n        }\n      }\n      /**\n         * Called on `drain` event\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onDrain\",\n      value: function onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n\n        this.prevBufferLen = 0;\n\n        if (0 === this.writeBuffer.length) {\n          this.emitReserved(\"drain\");\n        } else {\n          this.flush();\n        }\n      }\n      /**\n         * Flush write buffers.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"flush\",\n      value: function flush() {\n        if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n          this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n          // splice writeBuffer and callbackBuffer on `drain`\n\n          this.prevBufferLen = this.writeBuffer.length;\n          this.emitReserved(\"flush\");\n        }\n      }\n      /**\n         * Sends a message.\n         *\n         * @param {String} message.\n         * @param {Function} callback function.\n         * @param {Object} options.\n         * @return {Socket} for chaining.\n         * @api public\n         */ },\n\n    {\n      key: \"write\",\n      value: function write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n      } },\n    {\n      key: \"send\",\n      value: function send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n      }\n      /**\n         * Sends a packet.\n         *\n         * @param {String} packet type.\n         * @param {String} data.\n         * @param {Object} options.\n         * @param {Function} callback function.\n         * @api private\n         */ },\n\n    {\n      key: \"sendPacket\",\n      value: function sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n          fn = data;\n          data = undefined;\n        }\n\n        if (\"function\" === typeof options) {\n          fn = options;\n          options = null;\n        }\n\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n          return;\n        }\n\n        options = options || {};\n        options.compress = false !== options.compress;\n        var packet = {\n          type: type,\n          data: data,\n          options: options };\n\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn) this.once(\"flush\", fn);\n        this.flush();\n      }\n      /**\n         * Closes the connection.\n         *\n         * @api public\n         */ },\n\n    {\n      key: \"close\",\n      value: function close() {\n        var _this6 = this;\n\n        var close = function close() {\n          _this6.onClose(\"forced close\");\n\n          _this6.transport.close();\n        };\n\n        var cleanupAndClose = function cleanupAndClose() {\n          _this6.off(\"upgrade\", cleanupAndClose);\n\n          _this6.off(\"upgradeError\", cleanupAndClose);\n\n          close();\n        };\n\n        var waitForUpgrade = function waitForUpgrade() {\n          // wait for upgrade to finish since we can't send packets while pausing a transport\n          _this6.once(\"upgrade\", cleanupAndClose);\n\n          _this6.once(\"upgradeError\", cleanupAndClose);\n        };\n\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n          this.readyState = \"closing\";\n\n          if (this.writeBuffer.length) {\n            this.once(\"drain\", function () {\n              if (_this6.upgrading) {\n                waitForUpgrade();\n              } else {\n                close();\n              }\n            });\n          } else if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        }\n\n        return this;\n      }\n      /**\n         * Called upon transport error\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onError\",\n      value: function onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n      }\n      /**\n         * Called upon transport close.\n         *\n         * @api private\n         */ },\n\n    {\n      key: \"onClose\",\n      value: function onClose(reason, desc) {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n          // clear timers\n          this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n          this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n          this.transport.close(); // ignore further transport communication\n\n          this.transport.removeAllListeners();\n\n          if (typeof removeEventListener === \"function\") {\n            removeEventListener(\"offline\", this.offlineEventListener, false);\n          } // set ready state\n\n\n          this.readyState = \"closed\"; // clear session id\n\n          this.id = null; // emit close event\n\n          this.emitReserved(\"close\", reason, desc); // clean buffers after, so users can still\n          // grab the buffers on `close` event\n\n          this.writeBuffer = [];\n          this.prevBufferLen = 0;\n        }\n      }\n      /**\n         * Filters upgrades, returning only those matching client transports.\n         *\n         * @param {Array} server upgrades\n         * @api private\n         *\n         */ },\n\n    {\n      key: \"filterUpgrades\",\n      value: function filterUpgrades(upgrades) {\n        var filteredUpgrades = [];\n        var i = 0;\n        var j = upgrades.length;\n\n        for (; i < j; i++) {\n          if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n        }\n\n        return filteredUpgrades;\n      } }]);\n\n\n    return Socket;\n  }(Emitter_1);\n  Socket$1.protocol = protocol$1;\n\n  function clone(obj) {\n    var o = {};\n\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        o[i] = obj[i];\n      }\n    }\n\n    return o;\n  }\n\n  var withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n\n  var isView = function isView(obj) {\n    return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;\n  };\n\n  var toString = Object.prototype.toString;\n  var withNativeBlob = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && toString.call(Blob) === \"[object BlobConstructor]\";\n  var withNativeFile = typeof File === \"function\" || typeof File !== \"undefined\" && toString.call(File) === \"[object FileConstructor]\";\n  /**\n                                                                                                                                         * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n                                                                                                                                         *\n                                                                                                                                         * @private\n                                                                                                                                         */\n\n  function isBinary(obj) {\n    return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;\n  }\n  function hasBinary(obj, toJSON) {\n    if (!obj || _typeof(obj) !== \"object\") {\n      return false;\n    }\n\n    if (Array.isArray(obj)) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (hasBinary(obj[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    if (isBinary(obj)) {\n      return true;\n    }\n\n    if (obj.toJSON && typeof obj.toJSON === \"function\" && arguments.length === 1) {\n      return hasBinary(obj.toJSON(), true);\n    }\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n     * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n     *\n     * @param {Object} packet - socket.io event packet\n     * @return {Object} with deconstructed packet and list of buffers\n     * @public\n     */\n\n  function deconstructPacket(packet) {\n    var buffers = [];\n    var packetData = packet.data;\n    var pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n\n    return {\n      packet: pack,\n      buffers: buffers };\n\n  }\n\n  function _deconstructPacket(data, buffers) {\n    if (!data) return data;\n\n    if (isBinary(data)) {\n      var placeholder = {\n        _placeholder: true,\n        num: buffers.length };\n\n      buffers.push(data);\n      return placeholder;\n    } else if (Array.isArray(data)) {\n      var newData = new Array(data.length);\n\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i], buffers);\n      }\n\n      return newData;\n    } else if (_typeof(data) === \"object\" && !(data instanceof Date)) {\n      var _newData = {};\n\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          _newData[key] = _deconstructPacket(data[key], buffers);\n        }\n      }\n\n      return _newData;\n    }\n\n    return data;\n  }\n  /**\n     * Reconstructs a binary packet from its placeholder packet and buffers\n     *\n     * @param {Object} packet - event packet with placeholders\n     * @param {Array} buffers - binary buffers to put in placeholder positions\n     * @return {Object} reconstructed packet\n     * @public\n     */\n\n\n  function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    packet.attachments = undefined; // no longer useful\n\n    return packet;\n  }\n\n  function _reconstructPacket(data, buffers) {\n    if (!data) return data;\n\n    if (data && data._placeholder) {\n      return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n    } else if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i], buffers);\n      }\n    } else if (_typeof(data) === \"object\") {\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          data[key] = _reconstructPacket(data[key], buffers);\n        }\n      }\n    }\n\n    return data;\n  }\n\n  /**\n     * Protocol version.\n     *\n     * @public\n     */\n\n  var protocol = 5;\n  var PacketType;\n\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (PacketType = {}));\n  /**\n                                        * A socket.io Encoder instance\n                                        */\n\n\n  var Encoder = /*#__PURE__*/function () {\n    function Encoder() {\n      _classCallCheck(this, Encoder);\n    }\n\n    _createClass(Encoder, [{\n      key: \"encode\",\n      value:\n      /**\n              * Encode a packet as a single string if non-binary, or as a\n              * buffer sequence, depending on packet type.\n              *\n              * @param {Object} obj - packet object\n              */\n      function encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n          if (hasBinary(obj)) {\n            obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n            return this.encodeAsBinary(obj);\n          }\n        }\n\n        return [this.encodeAsString(obj)];\n      }\n      /**\n         * Encode packet as string.\n         */ },\n\n    {\n      key: \"encodeAsString\",\n      value: function encodeAsString(obj) {\n        // first is type\n        var str = \"\" + obj.type; // attachments if we have them\n\n        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n          str += obj.attachments + \"-\";\n        } // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n\n\n        if (obj.nsp && \"/\" !== obj.nsp) {\n          str += obj.nsp + \",\";\n        } // immediately followed by the id\n\n\n        if (null != obj.id) {\n          str += obj.id;\n        } // json data\n\n\n        if (null != obj.data) {\n          str += JSON.stringify(obj.data);\n        }\n\n        return str;\n      }\n      /**\n         * Encode packet as 'buffer sequence' by removing blobs, and\n         * deconstructing packet into object with placeholders and\n         * a list of buffers.\n         */ },\n\n    {\n      key: \"encodeAsBinary\",\n      value: function encodeAsBinary(obj) {\n        var deconstruction = deconstructPacket(obj);\n        var pack = this.encodeAsString(deconstruction.packet);\n        var buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n\n        return buffers; // write all the buffers\n      } }]);\n\n\n    return Encoder;\n  }();\n  /**\n        * A socket.io Decoder instance\n        *\n        * @return {Object} decoder\n        */\n\n  var Decoder = /*#__PURE__*/function (_Emitter) {\n    _inherits(Decoder, _Emitter);\n\n    var _super = _createSuper(Decoder);\n\n    function Decoder() {\n      _classCallCheck(this, Decoder);\n\n      return _super.call(this);\n    }\n    /**\n       * Decodes an encoded packet string into packet JSON.\n       *\n       * @param {String} obj - encoded packet\n       */\n\n\n    _createClass(Decoder, [{\n      key: \"add\",\n      value: function add(obj) {\n        var packet;\n\n        if (typeof obj === \"string\") {\n          packet = this.decodeString(obj);\n\n          if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n            // binary packet's json\n            this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n            if (packet.attachments === 0) {\n              _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n            }\n          } else {\n            // non-binary full packet\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        } else if (isBinary(obj) || obj.base64) {\n          // raw binary data\n          if (!this.reconstructor) {\n            throw new Error(\"got binary data when not reconstructing a packet\");\n          } else {\n            packet = this.reconstructor.takeBinaryData(obj);\n\n            if (packet) {\n              // received final buffer\n              this.reconstructor = null;\n\n              _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n            }\n          }\n        } else {\n          throw new Error(\"Unknown type: \" + obj);\n        }\n      }\n      /**\n         * Decode a packet String (JSON data)\n         *\n         * @param {String} str\n         * @return {Object} packet\n         */ },\n\n    {\n      key: \"decodeString\",\n      value: function decodeString(str) {\n        var i = 0; // look up type\n\n        var p = {\n          type: Number(str.charAt(0)) };\n\n\n        if (PacketType[p.type] === undefined) {\n          throw new Error(\"unknown packet type \" + p.type);\n        } // look up attachments if type binary\n\n\n        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n          var start = i + 1;\n\n          while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n          var buf = str.substring(start, i);\n\n          if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n            throw new Error(\"Illegal attachments\");\n          }\n\n          p.attachments = Number(buf);\n        } // look up namespace (if any)\n\n\n        if (\"/\" === str.charAt(i + 1)) {\n          var _start = i + 1;\n\n          while (++i) {\n            var c = str.charAt(i);\n            if (\",\" === c) break;\n            if (i === str.length) break;\n          }\n\n          p.nsp = str.substring(_start, i);\n        } else {\n          p.nsp = \"/\";\n        } // look up id\n\n\n        var next = str.charAt(i + 1);\n\n        if (\"\" !== next && Number(next) == next) {\n          var _start2 = i + 1;\n\n          while (++i) {\n            var _c = str.charAt(i);\n\n            if (null == _c || Number(_c) != _c) {\n              --i;\n              break;\n            }\n\n            if (i === str.length) break;\n          }\n\n          p.id = Number(str.substring(_start2, i + 1));\n        } // look up json data\n\n\n        if (str.charAt(++i)) {\n          var payload = tryParse(str.substr(i));\n\n          if (Decoder.isPayloadValid(p.type, payload)) {\n            p.data = payload;\n          } else {\n            throw new Error(\"invalid payload\");\n          }\n        }\n\n        return p;\n      } },\n    {\n      key: \"destroy\",\n      value:\n      /**\n              * Deallocates a parser's resources\n              */\n      function destroy() {\n        if (this.reconstructor) {\n          this.reconstructor.finishedReconstruction();\n        }\n      } }],\n    [{\n      key: \"isPayloadValid\",\n      value: function isPayloadValid(type, payload) {\n        switch (type) {\n          case PacketType.CONNECT:\n            return _typeof(payload) === \"object\";\n\n          case PacketType.DISCONNECT:\n            return payload === undefined;\n\n          case PacketType.CONNECT_ERROR:\n            return typeof payload === \"string\" || _typeof(payload) === \"object\";\n\n          case PacketType.EVENT:\n          case PacketType.BINARY_EVENT:\n            return Array.isArray(payload) && payload.length > 0;\n\n          case PacketType.ACK:\n          case PacketType.BINARY_ACK:\n            return Array.isArray(payload);}\n\n      } }]);\n\n\n    return Decoder;\n  }(Emitter_1);\n\n  function tryParse(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n     * A manager of a binary event's 'buffer sequence'. Should\n     * be constructed whenever a packet of type BINARY_EVENT is\n     * decoded.\n     *\n     * @param {Object} packet\n     * @return {BinaryReconstructor} initialized reconstructor\n     */\n\n\n  var BinaryReconstructor = /*#__PURE__*/function () {\n    function BinaryReconstructor(packet) {\n      _classCallCheck(this, BinaryReconstructor);\n\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n       * Method to be called when binary data received from connection\n       * after a BINARY_EVENT packet.\n       *\n       * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n       * @return {null | Object} returns null if more binary data is expected or\n       *   a reconstructed packet object if all buffers have been received.\n       */\n\n\n    _createClass(BinaryReconstructor, [{\n      key: \"takeBinaryData\",\n      value: function takeBinaryData(binData) {\n        this.buffers.push(binData);\n\n        if (this.buffers.length === this.reconPack.attachments) {\n          // done with buffer list\n          var packet = reconstructPacket(this.reconPack, this.buffers);\n          this.finishedReconstruction();\n          return packet;\n        }\n\n        return null;\n      }\n      /**\n         * Cleans up binary packet reconstruction variables.\n         */ },\n\n    {\n      key: \"finishedReconstruction\",\n      value: function finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n      } }]);\n\n\n    return BinaryReconstructor;\n  }();\n\n  var parser = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    protocol: protocol,\n    get PacketType() {return PacketType;},\n    Encoder: Encoder,\n    Decoder: Decoder });\n\n\n  function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n      obj.off(ev, fn);\n    };\n  }\n\n  /**\n     * Internal events.\n     * These events can't be emitted by the user.\n     */\n\n  var RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1 });\n\n  var Socket = /*#__PURE__*/function (_Emitter) {\n    _inherits(Socket, _Emitter);\n\n    var _super = _createSuper(Socket);\n\n    /**\n                                        * `Socket` constructor.\n                                        *\n                                        * @public\n                                        */\n    function Socket(io, nsp, opts) {\n      var _this;\n\n      _classCallCheck(this, Socket);\n\n      _this = _super.call(this);\n      _this.connected = false;\n      _this.disconnected = true;\n      _this.receiveBuffer = [];\n      _this.sendBuffer = [];\n      _this.ids = 0;\n      _this.acks = {};\n      _this.flags = {};\n      _this.io = io;\n      _this.nsp = nsp;\n\n      if (opts && opts.auth) {\n        _this.auth = opts.auth;\n      }\n\n      if (_this.io._autoConnect) _this.open();\n      return _this;\n    }\n    /**\n       * Subscribe to open, close and packet events\n       *\n       * @private\n       */\n\n\n    _createClass(Socket, [{\n      key: \"subEvents\",\n      value: function subEvents() {\n        if (this.subs) return;\n        var io = this.io;\n        this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n      }\n      /**\n         * Whether the Socket will try to reconnect when its Manager connects or reconnects\n         */ },\n\n    {\n      key: \"active\",\n      get: function get() {\n        return !!this.subs;\n      }\n      /**\n         * \"Opens\" the socket.\n         *\n         * @public\n         */ },\n\n    {\n      key: \"connect\",\n      value: function connect() {\n        if (this.connected) return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n        if (\"open\" === this.io._readyState) this.onopen();\n        return this;\n      }\n      /**\n         * Alias for connect()\n         */ },\n\n    {\n      key: \"open\",\n      value: function open() {\n        return this.connect();\n      }\n      /**\n         * Sends a `message` event.\n         *\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"send\",\n      value: function send() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n      }\n      /**\n         * Override `emit`.\n         * If the event is in `events`, it's emitted normally.\n         *\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"emit\",\n      value: function emit(ev) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n          throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        args.unshift(ev);\n        var packet = {\n          type: PacketType.EVENT,\n          data: args };\n\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false; // event ack callback\n\n        if (\"function\" === typeof args[args.length - 1]) {\n          var id = this.ids++;\n          var ack = args.pop();\n\n          this._registerAckCallback(id, ack);\n\n          packet.id = id;\n        }\n\n        var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n        var discardPacket = this.flags[\"volatile\"] && (!isTransportWritable || !this.connected);\n\n        if (discardPacket) ;else if (this.connected) {\n          this.packet(packet);\n        } else {\n          this.sendBuffer.push(packet);\n        }\n\n        this.flags = {};\n        return this;\n      }\n      /**\n         * @private\n         */ },\n\n    {\n      key: \"_registerAckCallback\",\n      value: function _registerAckCallback(id, ack) {\n        var _this2 = this;\n\n        var timeout = this.flags.timeout;\n\n        if (timeout === undefined) {\n          this.acks[id] = ack;\n          return;\n        } // @ts-ignore\n\n\n        var timer = this.io.setTimeoutFn(function () {\n          delete _this2.acks[id];\n\n          for (var i = 0; i < _this2.sendBuffer.length; i++) {\n            if (_this2.sendBuffer[i].id === id) {\n              _this2.sendBuffer.splice(i, 1);\n            }\n          }\n\n          ack.call(_this2, new Error(\"operation has timed out\"));\n        }, timeout);\n\n        this.acks[id] = function () {\n          // @ts-ignore\n          _this2.io.clearTimeoutFn(timer);\n\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          ack.apply(_this2, [null].concat(args));\n        };\n      }\n      /**\n         * Sends a packet.\n         *\n         * @param packet\n         * @private\n         */ },\n\n    {\n      key: \"packet\",\n      value: function packet(_packet) {\n        _packet.nsp = this.nsp;\n\n        this.io._packet(_packet);\n      }\n      /**\n         * Called upon engine `open`.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onopen\",\n      value: function onopen() {\n        var _this3 = this;\n\n        if (typeof this.auth == \"function\") {\n          this.auth(function (data) {\n            _this3.packet({\n              type: PacketType.CONNECT,\n              data: data });\n\n          });\n        } else {\n          this.packet({\n            type: PacketType.CONNECT,\n            data: this.auth });\n\n        }\n      }\n      /**\n         * Called upon engine or manager `error`.\n         *\n         * @param err\n         * @private\n         */ },\n\n    {\n      key: \"onerror\",\n      value: function onerror(err) {\n        if (!this.connected) {\n          this.emitReserved(\"connect_error\", err);\n        }\n      }\n      /**\n         * Called upon engine `close`.\n         *\n         * @param reason\n         * @private\n         */ },\n\n    {\n      key: \"onclose\",\n      value: function onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n      }\n      /**\n         * Called with socket packet.\n         *\n         * @param packet\n         * @private\n         */ },\n\n    {\n      key: \"onpacket\",\n      value: function onpacket(packet) {\n        var sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace) return;\n\n        switch (packet.type) {\n          case PacketType.CONNECT:\n            if (packet.data && packet.data.sid) {\n              var id = packet.data.sid;\n              this.onconnect(id);\n            } else {\n              this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n            }\n\n            break;\n\n          case PacketType.EVENT:\n            this.onevent(packet);\n            break;\n\n          case PacketType.BINARY_EVENT:\n            this.onevent(packet);\n            break;\n\n          case PacketType.ACK:\n            this.onack(packet);\n            break;\n\n          case PacketType.BINARY_ACK:\n            this.onack(packet);\n            break;\n\n          case PacketType.DISCONNECT:\n            this.ondisconnect();\n            break;\n\n          case PacketType.CONNECT_ERROR:\n            this.destroy();\n            var err = new Error(packet.data.message); // @ts-ignore\n\n            err.data = packet.data.data;\n            this.emitReserved(\"connect_error\", err);\n            break;}\n\n      }\n      /**\n         * Called upon a server event.\n         *\n         * @param packet\n         * @private\n         */ },\n\n    {\n      key: \"onevent\",\n      value: function onevent(packet) {\n        var args = packet.data || [];\n\n        if (null != packet.id) {\n          args.push(this.ack(packet.id));\n        }\n\n        if (this.connected) {\n          this.emitEvent(args);\n        } else {\n          this.receiveBuffer.push(Object.freeze(args));\n        }\n      } },\n    {\n      key: \"emitEvent\",\n      value: function emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n          var listeners = this._anyListeners.slice();\n\n          var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var listener = _step.value;\n              listener.apply(this, args);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n      }\n      /**\n         * Produces an ack callback to emit with an event.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"ack\",\n      value: function ack(id) {\n        var self = this;\n        var sent = false;\n        return function () {\n          // prevent double callbacks\n          if (sent) return;\n          sent = true;\n\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          self.packet({\n            type: PacketType.ACK,\n            id: id,\n            data: args });\n\n        };\n      }\n      /**\n         * Called upon a server acknowlegement.\n         *\n         * @param packet\n         * @private\n         */ },\n\n    {\n      key: \"onack\",\n      value: function onack(packet) {\n        var ack = this.acks[packet.id];\n\n        if (\"function\" === typeof ack) {\n          ack.apply(this, packet.data);\n          delete this.acks[packet.id];\n        }\n      }\n      /**\n         * Called upon server connect.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onconnect\",\n      value: function onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n      }\n      /**\n         * Emit buffered events (received and emitted).\n         *\n         * @private\n         */ },\n\n    {\n      key: \"emitBuffered\",\n      value: function emitBuffered() {\n        var _this4 = this;\n\n        this.receiveBuffer.forEach(function (args) {\n          return _this4.emitEvent(args);\n        });\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach(function (packet) {\n          return _this4.packet(packet);\n        });\n        this.sendBuffer = [];\n      }\n      /**\n         * Called upon server disconnect.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"ondisconnect\",\n      value: function ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n      }\n      /**\n         * Called upon forced client/server side disconnections,\n         * this method ensures the manager stops tracking us and\n         * that reconnections don't get triggered for this.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"destroy\",\n      value: function destroy() {\n        if (this.subs) {\n          // clean subscriptions to avoid reconnections\n          this.subs.forEach(function (subDestroy) {\n            return subDestroy();\n          });\n          this.subs = undefined;\n        }\n\n        this.io[\"_destroy\"](this);\n      }\n      /**\n         * Disconnects the socket manually.\n         *\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (this.connected) {\n          this.packet({\n            type: PacketType.DISCONNECT });\n\n        } // remove socket from pool\n\n\n        this.destroy();\n\n        if (this.connected) {\n          // fire events\n          this.onclose(\"io client disconnect\");\n        }\n\n        return this;\n      }\n      /**\n         * Alias for disconnect()\n         *\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"close\",\n      value: function close() {\n        return this.disconnect();\n      }\n      /**\n         * Sets the compress flag.\n         *\n         * @param compress - if `true`, compresses the sending data\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"compress\",\n      value: function compress(_compress) {\n        this.flags.compress = _compress;\n        return this;\n      }\n      /**\n         * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n         * ready to send messages.\n         *\n         * @returns self\n         * @public\n         */ },\n\n    {\n      key: \"volatile\",\n      get: function get() {\n        this.flags[\"volatile\"] = true;\n        return this;\n      }\n      /**\n         * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n         * given number of milliseconds have elapsed without an acknowledgement from the server:\n         *\n         * ```\n         * socket.timeout(5000).emit(\"my-event\", (err) => {\n         *   if (err) {\n         *     // the server did not acknowledge the event in the given delay\n         *   }\n         * });\n         * ```\n         *\n         * @returns self\n         * @public\n         */ },\n\n    {\n      key: \"timeout\",\n      value: function timeout(_timeout) {\n        this.flags.timeout = _timeout;\n        return this;\n      }\n      /**\n         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n         * callback.\n         *\n         * @param listener\n         * @public\n         */ },\n\n    {\n      key: \"onAny\",\n      value: function onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n\n        this._anyListeners.push(listener);\n\n        return this;\n      }\n      /**\n         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n         * callback. The listener is added to the beginning of the listeners array.\n         *\n         * @param listener\n         * @public\n         */ },\n\n    {\n      key: \"prependAny\",\n      value: function prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n\n        this._anyListeners.unshift(listener);\n\n        return this;\n      }\n      /**\n         * Removes the listener that will be fired when any event is emitted.\n         *\n         * @param listener\n         * @public\n         */ },\n\n    {\n      key: \"offAny\",\n      value: function offAny(listener) {\n        if (!this._anyListeners) {\n          return this;\n        }\n\n        if (listener) {\n          var listeners = this._anyListeners;\n\n          for (var i = 0; i < listeners.length; i++) {\n            if (listener === listeners[i]) {\n              listeners.splice(i, 1);\n              return this;\n            }\n          }\n        } else {\n          this._anyListeners = [];\n        }\n\n        return this;\n      }\n      /**\n         * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n         * e.g. to remove listeners.\n         *\n         * @public\n         */ },\n\n    {\n      key: \"listenersAny\",\n      value: function listenersAny() {\n        return this._anyListeners || [];\n      } }]);\n\n\n    return Socket;\n  }(Emitter_1);\n\n  /**\n                 * Expose `Backoff`.\n                 */\n\n  var backo2 = Backoff;\n  /**\n                         * Initialize backoff timer with `opts`.\n                         *\n                         * - `min` initial timeout in milliseconds [100]\n                         * - `max` max timeout [10000]\n                         * - `jitter` [0]\n                         * - `factor` [2]\n                         *\n                         * @param {Object} opts\n                         * @api public\n                         */\n\n  function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n  }\n  /**\n     * Return the backoff duration.\n     *\n     * @return {Number}\n     * @api public\n     */\n\n\n  Backoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n\n    if (this.jitter) {\n      var rand = Math.random();\n      var deviation = Math.floor(rand * this.jitter * ms);\n      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n\n    return Math.min(ms, this.max) | 0;\n  };\n  /**\n      * Reset the number of attempts.\n      *\n      * @api public\n      */\n\n\n  Backoff.prototype.reset = function () {\n    this.attempts = 0;\n  };\n  /**\n      * Set the minimum duration\n      *\n      * @api public\n      */\n\n\n  Backoff.prototype.setMin = function (min) {\n    this.ms = min;\n  };\n  /**\n      * Set the maximum duration\n      *\n      * @api public\n      */\n\n\n  Backoff.prototype.setMax = function (max) {\n    this.max = max;\n  };\n  /**\n      * Set the jitter\n      *\n      * @api public\n      */\n\n\n  Backoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n  };\n\n  var Manager = /*#__PURE__*/function (_Emitter) {\n    _inherits(Manager, _Emitter);\n\n    var _super = _createSuper(Manager);\n\n    function Manager(uri, opts) {\n      var _this;\n\n      _classCallCheck(this, Manager);\n\n      var _a;\n\n      _this = _super.call(this);\n      _this.nsps = {};\n      _this.subs = [];\n\n      if (uri && \"object\" === _typeof(uri)) {\n        opts = uri;\n        uri = undefined;\n      }\n\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      _this.opts = opts;\n      installTimerFunctions(_assertThisInitialized(_this), opts);\n\n      _this.reconnection(opts.reconnection !== false);\n\n      _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n      _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n      _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n      _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n\n      _this.backoff = new backo2({\n        min: _this.reconnectionDelay(),\n        max: _this.reconnectionDelayMax(),\n        jitter: _this.randomizationFactor() });\n\n\n      _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n      _this._readyState = \"closed\";\n      _this.uri = uri;\n\n      var _parser = opts.parser || parser;\n\n      _this.encoder = new _parser.Encoder();\n      _this.decoder = new _parser.Decoder();\n      _this._autoConnect = opts.autoConnect !== false;\n      if (_this._autoConnect) _this.open();\n      return _this;\n    }\n\n    _createClass(Manager, [{\n      key: \"reconnection\",\n      value: function reconnection(v) {\n        if (!arguments.length) return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n      } },\n    {\n      key: \"reconnectionAttempts\",\n      value: function reconnectionAttempts(v) {\n        if (v === undefined) return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n      } },\n    {\n      key: \"reconnectionDelay\",\n      value: function reconnectionDelay(v) {\n        var _a;\n\n        if (v === undefined) return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n      } },\n    {\n      key: \"randomizationFactor\",\n      value: function randomizationFactor(v) {\n        var _a;\n\n        if (v === undefined) return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n      } },\n    {\n      key: \"reconnectionDelayMax\",\n      value: function reconnectionDelayMax(v) {\n        var _a;\n\n        if (v === undefined) return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n      } },\n    {\n      key: \"timeout\",\n      value: function timeout(v) {\n        if (!arguments.length) return this._timeout;\n        this._timeout = v;\n        return this;\n      }\n      /**\n         * Starts trying to reconnect if reconnection is enabled and we have not\n         * started reconnecting yet\n         *\n         * @private\n         */ },\n\n    {\n      key: \"maybeReconnectOnOpen\",\n      value: function maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n          // keeps reconnection from firing twice for the same reconnection loop\n          this.reconnect();\n        }\n      }\n      /**\n         * Sets the current transport `socket`.\n         *\n         * @param {Function} fn - optional, callback\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"open\",\n      value: function open(fn) {\n        var _this2 = this;\n\n        if (~this._readyState.indexOf(\"open\")) return this;\n        this.engine = new Socket$1(this.uri, this.opts);\n        var socket = this.engine;\n        var self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false; // emit `open`\n\n        var openSubDestroy = on(socket, \"open\", function () {\n          self.onopen();\n          fn && fn();\n        }); // emit `error`\n\n        var errorSub = on(socket, \"error\", function (err) {\n          self.cleanup();\n          self._readyState = \"closed\";\n\n          _this2.emitReserved(\"error\", err);\n\n          if (fn) {\n            fn(err);\n          } else {\n            // Only do this if there is no fn to handle the error\n            self.maybeReconnectOnOpen();\n          }\n        });\n\n        if (false !== this._timeout) {\n          var timeout = this._timeout;\n\n          if (timeout === 0) {\n            openSubDestroy(); // prevents a race condition with the 'open' event\n          } // set timer\n\n\n          var timer = this.setTimeoutFn(function () {\n            openSubDestroy();\n            socket.close(); // @ts-ignore\n\n            socket.emit(\"error\", new Error(\"timeout\"));\n          }, timeout);\n\n          if (this.opts.autoUnref) {\n            timer.unref();\n          }\n\n          this.subs.push(function subDestroy() {\n            clearTimeout(timer);\n          });\n        }\n\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n      }\n      /**\n         * Alias for open()\n         *\n         * @return self\n         * @public\n         */ },\n\n    {\n      key: \"connect\",\n      value: function connect(fn) {\n        return this.open(fn);\n      }\n      /**\n         * Called upon transport open.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onopen\",\n      value: function onopen() {\n        // clear old subs\n        this.cleanup(); // mark as open\n\n        this._readyState = \"open\";\n        this.emitReserved(\"open\"); // add new subs\n\n        var socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n      }\n      /**\n         * Called upon a ping.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onping\",\n      value: function onping() {\n        this.emitReserved(\"ping\");\n      }\n      /**\n         * Called with data.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"ondata\",\n      value: function ondata(data) {\n        this.decoder.add(data);\n      }\n      /**\n         * Called when parser fully decodes a packet.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"ondecoded\",\n      value: function ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n      }\n      /**\n         * Called upon socket error.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onerror\",\n      value: function onerror(err) {\n        this.emitReserved(\"error\", err);\n      }\n      /**\n         * Creates a new socket for the given `nsp`.\n         *\n         * @return {Socket}\n         * @public\n         */ },\n\n    {\n      key: \"socket\",\n      value: function socket(nsp, opts) {\n        var socket = this.nsps[nsp];\n\n        if (!socket) {\n          socket = new Socket(this, nsp, opts);\n          this.nsps[nsp] = socket;\n        }\n\n        return socket;\n      }\n      /**\n         * Called upon a socket close.\n         *\n         * @param socket\n         * @private\n         */ },\n\n    {\n      key: \"_destroy\",\n      value: function _destroy(socket) {\n        var nsps = Object.keys(this.nsps);\n\n        for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n          var nsp = _nsps[_i];\n          var _socket = this.nsps[nsp];\n\n          if (_socket.active) {\n            return;\n          }\n        }\n\n        this._close();\n      }\n      /**\n         * Writes a packet.\n         *\n         * @param packet\n         * @private\n         */ },\n\n    {\n      key: \"_packet\",\n      value: function _packet(packet) {\n        var encodedPackets = this.encoder.encode(packet);\n\n        for (var i = 0; i < encodedPackets.length; i++) {\n          this.engine.write(encodedPackets[i], packet.options);\n        }\n      }\n      /**\n         * Clean up transport subscriptions and packet buffer.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"cleanup\",\n      value: function cleanup() {\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs.length = 0;\n        this.decoder.destroy();\n      }\n      /**\n         * Close the current socket.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"_close\",\n      value: function _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine) this.engine.close();\n      }\n      /**\n         * Alias for close()\n         *\n         * @private\n         */ },\n\n    {\n      key: \"disconnect\",\n      value: function disconnect() {\n        return this._close();\n      }\n      /**\n         * Called upon engine close.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onclose\",\n      value: function onclose(reason) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n\n        if (this._reconnection && !this.skipReconnect) {\n          this.reconnect();\n        }\n      }\n      /**\n         * Attempt a reconnection.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"reconnect\",\n      value: function reconnect() {\n        var _this3 = this;\n\n        if (this._reconnecting || this.skipReconnect) return this;\n        var self = this;\n\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n          this.backoff.reset();\n          this.emitReserved(\"reconnect_failed\");\n          this._reconnecting = false;\n        } else {\n          var delay = this.backoff.duration();\n          this._reconnecting = true;\n          var timer = this.setTimeoutFn(function () {\n            if (self.skipReconnect) return;\n\n            _this3.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n            if (self.skipReconnect) return;\n            self.open(function (err) {\n              if (err) {\n                self._reconnecting = false;\n                self.reconnect();\n\n                _this3.emitReserved(\"reconnect_error\", err);\n              } else {\n                self.onreconnect();\n              }\n            });\n          }, delay);\n\n          if (this.opts.autoUnref) {\n            timer.unref();\n          }\n\n          this.subs.push(function subDestroy() {\n            clearTimeout(timer);\n          });\n        }\n      }\n      /**\n         * Called upon successful reconnect.\n         *\n         * @private\n         */ },\n\n    {\n      key: \"onreconnect\",\n      value: function onreconnect() {\n        var attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n      } }]);\n\n\n    return Manager;\n  }(Emitter_1);\n\n  /**\n                 * Managers cache.\n                 */\n\n  var cache = {};\n\n  function lookup(uri, opts) {\n    if (_typeof(uri) === \"object\") {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    var parsed = url(uri, opts.path || \"/socket.io\");\n    var source = parsed.source;\n    var id = parsed.id;\n    var path = parsed.path;\n    var sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    var newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n    var io;\n\n    if (newConnection) {\n      io = new Manager(source, opts);\n    } else {\n      if (!cache[id]) {\n        cache[id] = new Manager(source, opts);\n      }\n\n      io = cache[id];\n    }\n\n    if (parsed.query && !opts.query) {\n      opts.query = parsed.queryKey;\n    }\n\n    return io.socket(parsed.path, opts);\n  } // so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n  // namespace (e.g. `io.connect(...)`), for backward compatibility\n\n\n  _extends(lookup, {\n    Manager: Manager,\n    Socket: Socket,\n    io: lookup,\n    connect: lookup });\n\n\n  return lookup;\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ })
],[[0,"app-config"]]]);